#!/bin/bash
# log-viewer.sh

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

LOGS_DIR="/var/www/topflight/logs"

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ (—Å —É—á–µ—Ç–æ–º —Ä–æ—Ç–∞—Ü–∏–∏ PM2)
find_log_file() {
    local base_name="$1"

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
    if [ -f "$LOGS_DIR/$base_name" ] && [ -s "$LOGS_DIR/$base_name" ]; then
        echo "$LOGS_DIR/$base_name"
        return 0
    fi

    # –ó–∞—Ç–µ–º –∏—â–µ–º —Ñ–∞–π–ª—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ -0, -1, -2, etc.
    for i in {0..9}; do
        local file_with_suffix="$LOGS_DIR/${base_name%%.log}-${i}.log"
        if [ -f "$file_with_suffix" ] && [ -s "$file_with_suffix" ]; then
            echo "$file_with_suffix"
            return 0
        fi
    done

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è
    echo "$LOGS_DIR/$base_name"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
pretty_logs() {
    local base_file="$1"
    local lines="${2:-50}"

    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    local actual_file=$(find_log_file "$base_file")

    if [ ! -f "$actual_file" ]; then
        echo -e "${RED}‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: $actual_file${NC}"
        echo -e "${YELLOW}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã${NC}"
        return 1
    fi

    if [ ! -s "$actual_file" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç–æ–π: $(basename "$actual_file")${NC}"
        return 1
    fi

    echo -e "${BLUE}üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ $lines —Å—Ç—Ä–æ–∫ –∏–∑ $(basename "$actual_file"):${NC}"
    echo -e "${PURPLE}$actual_file${NC}"
    echo "$(printf '=%.0s' {1..80})"

    # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    tail -"$lines" "$actual_file" | while IFS= read -r line; do
        if [[ "$line" == *"ERROR"* ]] || [[ "$line" == *"error"* ]] || [[ "$line" == *"Error"* ]]; then
            echo -e "${RED}$line${NC}"
        elif [[ "$line" == *"WARNING"* ]] || [[ "$line" == *"warning"* ]] || [[ "$line" == *"Warning"* ]]; then
            echo -e "${YELLOW}$line${NC}"
        elif [[ "$line" == *"INFO"* ]] || [[ "$line" == *"info"* ]] || [[ "$line" == *"Info"* ]]; then
            echo -e "${GREEN}$line${NC}"
        elif [[ "$line" == *"DEBUG"* ]] || [[ "$line" == *"debug"* ]] || [[ "$line" == *"Debug"* ]]; then
            echo -e "${CYAN}$line${NC}"
        else
            echo "$line"
        fi
    done

    echo "$(printf '=%.0s' {1..80})"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (–≤–∫–ª—é—á–∞—è —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
get_all_log_files() {
    local base_name="$1"
    local files=()

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ -f "$LOGS_DIR/$base_name" ]; then
        files+=("$LOGS_DIR/$base_name")
    fi

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for i in {0..9}; do
        local file_with_suffix="$LOGS_DIR/${base_name%%.log}-${i}.log"
        if [ -f "$file_with_suffix" ]; then
            files+=("$file_with_suffix")
        fi
    done

    printf '%s\n' "${files[@]}"
}

# –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
interactive_viewer() {
    while true; do
        clear
        echo -e "${BLUE}üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –ª–æ–≥–æ–≤ (Backend)${NC}"
        echo "$(printf '=%.0s' {1..50})"
        echo ""
        echo -e "${GREEN}–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏:${NC}"
        echo "1) API –æ–±—â–∏–µ –ª–æ–≥–∏ (backend-api.log)"
        echo "2) API stdout (backend-api-out.log)"
        echo "3) API –æ—à–∏–±–∫–∏ (backend-api-error.log)"
        echo "4) Worker –ª–æ–≥–∏ (backend-worker.log)"
        echo "5) Worker stdout (backend-worker-out.log)"
        echo "6) Worker –æ—à–∏–±–∫–∏ (backend-worker-error.log)"
        echo "7) Monitor –ª–æ–≥–∏ (backend-monitor.log)"
        echo "8) Monitor stdout (backend-monitor-out.log)"
        echo "9) Monitor –æ—à–∏–±–∫–∏ (backend-monitor-error.log)"
        echo "10) –í—Å–µ –æ—à–∏–±–∫–∏ (error –ª–æ–≥–∏)"
        echo "11) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"
        echo "12) –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã"
        echo "13) –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω"
        echo "0) –í—ã—Ö–æ–¥"
        echo ""

        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-13): " choice

        case $choice in
            1)
                pretty_logs "backend-api.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            2)
                pretty_logs "backend-api-out.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            3)
                pretty_logs "backend-api-error.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            4)
                pretty_logs "backend-worker.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            5)
                pretty_logs "backend-worker-out.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            6)
                pretty_logs "backend-worker-error.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            7)
                pretty_logs "backend-monitor.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            8)
                pretty_logs "backend-monitor-out.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            9)
                pretty_logs "backend-monitor-error.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            10)
                echo -e "${RED}üö® –í—Å–µ –æ—à–∏–±–∫–∏ Backend:${NC}"
                echo ""
                echo -e "${YELLOW}API –û—à–∏–±–∫–∏:${NC}"
                pretty_logs "backend-api-error.log" 20
                echo -e "${YELLOW}Worker –û—à–∏–±–∫–∏:${NC}"
                pretty_logs "backend-worker-error.log" 20
                echo -e "${YELLOW}Monitor –û—à–∏–±–∫–∏:${NC}"
                pretty_logs "backend-monitor-error.log" 20
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            11)
                show_log_stats
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            12)
                list_all_files
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            13)
                clear
                ;;
            0)
                echo -e "${GREEN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${NC}"
                sleep 1
                ;;
        esac
    done
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
list_all_files() {
    echo -e "${BLUE}üìÅ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤:${NC}"
    echo "$(printf '=%.0s' {1..60})"

    for log_file in "$LOGS_DIR"/*.log; do
        if [ -f "$log_file" ]; then
            local filename=$(basename "$log_file")
            local size=$(du -h "$log_file" | cut -f1)
            local lines=$(wc -l < "$log_file")
            local modified=$(stat -c %y "$log_file" | cut -d' ' -f1,2 | cut -d'.' -f1)

            if [[ "$filename" == backend-* ]]; then
                echo -e "${GREEN}üìÑ $filename${NC}"
            else
                echo -e "${CYAN}üìÑ $filename${NC}"
            fi
            echo "   –†–∞–∑–º–µ—Ä: $size, –°—Ç—Ä–æ–∫: $lines, –ò–∑–º–µ–Ω–µ–Ω: $modified"
            echo ""
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ backend)
show_log_stats() {
    echo -e "${BLUE}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ Backend:${NC}"
    echo "$(printf '=%.0s' {1..60})"

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø—É
    declare -A log_groups

    for log_file in "$LOGS_DIR"/backend-*.log; do
        if [ -f "$log_file" ]; then
            local filename=$(basename "$log_file")
            local base_name="${filename%-*}"
            if [[ "$filename" == *-[0-9].log ]]; then
                base_name="${filename%-[0-9].log}"
            fi

            if [ -z "${log_groups[$base_name]}" ]; then
                log_groups[$base_name]="$log_file"
            else
                log_groups[$base_name]="${log_groups[$base_name]} $log_file"
            fi
        fi
    done

    for base_name in "${!log_groups[@]}"; do
        echo -e "${GREEN}üìÑ $base_name –≥—Ä—É–ø–ø–∞:${NC}"
        for file in ${log_groups[$base_name]}; do
            local filename=$(basename "$file")
            local size=$(du -h "$file" | cut -f1)
            local lines=$(wc -l < "$file")
            local modified=$(stat -c %y "$file" | cut -d' ' -f1,2 | cut -d'.' -f1)
            echo "   $filename: $size, $lines —Å—Ç—Ä–æ–∫, $modified"
        done
        echo ""
    done
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–≥–∞—Ö (—Ç–æ–ª—å–∫–æ backend)
search_logs() {
    local pattern="$1"
    local context="${2:-3}"

    if [ -z "$pattern" ]; then
        echo -e "${RED}‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞${NC}"
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 search 'error pattern' [–∫–æ–Ω—Ç–µ–∫—Å—Ç]"
        return 1
    fi

    echo -e "${BLUE}üîç –ü–æ–∏—Å–∫ '$pattern' –≤ –ª–æ–≥–∞—Ö Backend (–∫–æ–Ω—Ç–µ–∫—Å—Ç: $context —Å—Ç—Ä–æ–∫):${NC}"
    echo "$(printf '=%.0s' {1..60})"

    for log_file in "$LOGS_DIR"/backend-*.log; do
        if [ -f "$log_file" ] && [ -s "$log_file" ]; then
            local filename=$(basename "$log_file")
            local matches=$(grep -c "$pattern" "$log_file" 2>/dev/null)

            if [ "$matches" -gt 0 ]; then
                echo -e "${GREEN}üìÑ $filename ($matches —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π):${NC}"
                grep -C "$context" --color=always "$pattern" "$log_file" | head -20
                echo ""
            fi
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è follow —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
follow_logs() {
    local log_type="$1"
    local files=()

    case "$log_type" in
        "api")
            files=($(get_all_log_files "backend-api.log"))
            ;;
        "api-out")
            files=($(get_all_log_files "backend-api-out.log"))
            ;;
        "api-error")
            files=($(get_all_log_files "backend-api-error.log"))
            ;;
        "worker")
            files=($(get_all_log_files "backend-worker.log"))
            ;;
        "worker-error")
            files=($(get_all_log_files "backend-worker-error.log"))
            ;;
        "monitor")
            files=($(get_all_log_files "backend-monitor.log"))
            ;;
        "monitor-error")
            files=($(get_all_log_files "backend-monitor-error.log"))
            ;;
        "all")
            files=($(get_all_log_files "backend-api.log" && get_all_log_files "backend-api-out.log" && get_all_log_files "backend-api-error.log"))
            ;;
        "errors")
            files=($(get_all_log_files "backend-api-error.log" && get_all_log_files "backend-worker-error.log" && get_all_log_files "backend-monitor-error.log"))
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ª–æ–≥–∞: $log_type${NC}"
            return 1
            ;;
    esac

    if [ ${#files[@]} -eq 0 ]; then
        echo -e "${RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è${NC}"
        return 1
    fi

    echo -e "${BLUE}üì° –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤: ${files[*]}${NC}"
    echo "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    tail -f "${files[@]}"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "$1" in
        "interactive" | "i")
            interactive_viewer
            ;;
        "api")
            pretty_logs "backend-api.log" "${2:-50}"
            ;;
        "api-out")
            pretty_logs "backend-api-out.log" "${2:-50}"
            ;;
        "api-error")
            pretty_logs "backend-api-error.log" "${2:-50}"
            ;;
        "worker")
            pretty_logs "backend-worker.log" "${2:-50}"
            ;;
        "worker-out")
            pretty_logs "backend-worker-out.log" "${2:-50}"
            ;;
        "worker-error")
            pretty_logs "backend-worker-error.log" "${2:-50}"
            ;;
        "monitor")
            pretty_logs "backend-monitor.log" "${2:-50}"
            ;;
        "monitor-out")
            pretty_logs "backend-monitor-out.log" "${2:-50}"
            ;;
        "monitor-error")
            pretty_logs "backend-monitor-error.log" "${2:-50}"
            ;;
        "errors")
            echo -e "${RED}üö® –í—Å–µ –æ—à–∏–±–∫–∏ Backend:${NC}"
            pretty_logs "backend-api-error.log" 30
            pretty_logs "backend-worker-error.log" 30
            pretty_logs "backend-monitor-error.log" 30
            ;;
        "stats")
            show_log_stats
            ;;
        "list")
            list_all_files
            ;;
        "search")
            search_logs "$2" "$3"
            ;;
        "follow")
            follow_logs "${2:-api}"
            ;;
        "follow-errors")
            follow_logs "errors"
            ;;
        "follow-all")
            follow_logs "all"
            ;;
        *)
            echo -e "${BLUE}üîç Backend Log Viewer –¥–ª—è Yandex Parser API${NC}"
            echo ""
            echo -e "${GREEN}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
            echo "  interactive, i  - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"
            echo "  api [lines]     - API –ª–æ–≥–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 —Å—Ç—Ä–æ–∫)"
            echo "  api-out [lines] - API stdout"
            echo "  api-error [lines] - API –æ—à–∏–±–∫–∏"
            echo "  worker [lines]  - Worker –ª–æ–≥–∏"
            echo "  worker-out [lines] - Worker stdout"
            echo "  worker-error [lines] - Worker –æ—à–∏–±–∫–∏"
            echo "  monitor [lines] - Monitor –ª–æ–≥–∏"
            echo "  monitor-out [lines] - Monitor stdout"
            echo "  monitor-error [lines] - Monitor –æ—à–∏–±–∫–∏"
            echo "  errors          - –í—Å–µ –æ—à–∏–±–∫–∏ Backend"
            echo "  stats           - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤"
            echo "  list            - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"
            echo "  search 'pattern' [context] - –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö"
            echo "  follow [type]   - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
            echo "  follow-errors   - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ error –ª–æ–≥–æ–≤"
            echo "  follow-all      - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö Backend –ª–æ–≥–æ–≤"
            echo ""
            echo -e "${YELLOW}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
            echo "  ./log-viewer.sh interactive"
            echo "  ./log-viewer.sh api-error 100"
            echo "  ./log-viewer.sh search 'TypeError' 5"
            echo "  ./log-viewer.sh follow api-error"
            echo "  ./log-viewer.sh list"
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"
