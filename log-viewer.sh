#!/bin/bash
# log-viewer.sh

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

LOGS_DIR="/var/www/topflight/logs"

# –§—É–Ω–∫—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
pretty_logs() {
    local file="$1"
    local lines="${2:-50}"

    if [ ! -f "$file" ]; then
        echo -e "${RED}‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: $file${NC}"
        return 1
    fi

    echo -e "${BLUE}üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ $lines —Å—Ç—Ä–æ–∫ –∏–∑ $(basename "$file"):${NC}"
    echo -e "${PURPLE}$file${NC}"
    echo "$(printf '=%.0s' {1..80})"

    # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    tail -"$lines" "$file" | while IFS= read -r line; do
        if [[ "$line" == *"ERROR"* ]] || [[ "$line" == *"error"* ]] || [[ "$line" == *"Error"* ]]; then
            echo -e "${RED}$line${NC}"
        elif [[ "$line" == *"WARNING"* ]] || [[ "$line" == *"warning"* ]] || [[ "$line" == *"Warning"* ]]; then
            echo -e "${YELLOW}$line${NC}"
        elif [[ "$line" == *"INFO"* ]] || [[ "$line" == *"info"* ]] || [[ "$line" == *"Info"* ]]; then
            echo -e "${GREEN}$line${NC}"
        elif [[ "$line" == *"DEBUG"* ]] || [[ "$line" == *"debug"* ]] || [[ "$line" == *"Debug"* ]]; then
            echo -e "${CYAN}$line${NC}"
        else
            echo "$line"
        fi
    done

    echo "$(printf '=%.0s' {1..80})"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
interactive_viewer() {
    while true; do
        clear
        echo -e "${BLUE}üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –ª–æ–≥–æ–≤${NC}"
        echo "$(printf '=%.0s' {1..50})"
        echo ""
        echo -e "${GREEN}–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏:${NC}"
        echo "1) API –æ–±—â–∏–µ –ª–æ–≥–∏ (backend-api.log)"
        echo "2) API stdout (backend-api-out.log)"
        echo "3) API –æ—à–∏–±–∫–∏ (backend-api-error.log)"
        echo "4) Worker –ª–æ–≥–∏ (backend-worker.log)"
        echo "5) Worker stdout (backend-worker-out.log)"
        echo "6) Worker –æ—à–∏–±–∫–∏ (backend-worker-error.log)"
        echo "7) –í—Å–µ –æ—à–∏–±–∫–∏ (error –ª–æ–≥–∏)"
        echo "8) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"
        echo "9) –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω"
        echo "0) –í—ã—Ö–æ–¥"
        echo ""

        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-9): " choice

        case $choice in
            1)
                pretty_logs "$LOGS_DIR/backend-api.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            2)
                pretty_logs "$LOGS_DIR/backend-api-out.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            3)
                pretty_logs "$LOGS_DIR/backend-api-error.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            4)
                pretty_logs "$LOGS_DIR/backend-worker.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            5)
                pretty_logs "$LOGS_DIR/backend-worker-out.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            6)
                pretty_logs "$LOGS_DIR/backend-worker-error.log" 100
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            7)
                echo -e "${RED}üö® –í—Å–µ –æ—à–∏–±–∫–∏:${NC}"
                echo ""
                echo -e "${YELLOW}API –û—à–∏–±–∫–∏:${NC}"
                pretty_logs "$LOGS_DIR/backend-api-error.log" 20
                echo -e "${YELLOW}Worker –û—à–∏–±–∫–∏:${NC}"
                pretty_logs "$LOGS_DIR/backend-worker-error.log" 20
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            8)
                show_log_stats
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            9)
                clear
                ;;
            0)
                echo -e "${GREEN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${NC}"
                sleep 1
                ;;
        esac
    done
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤
show_log_stats() {
    echo -e "${BLUE}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤:${NC}"
    echo "$(printf '=%.0s' {1..60})"

    for log_file in "$LOGS_DIR"/*.log; do
        if [ -f "$log_file" ]; then
            local filename=$(basename "$log_file")
            local size=$(du -h "$log_file" | cut -f1)
            local lines=$(wc -l < "$log_file")
            local modified=$(stat -c %y "$log_file" | cut -d' ' -f1,2 | cut -d'.' -f1)

            echo -e "${GREEN}üìÑ $filename${NC}"
            echo "   –†–∞–∑–º–µ—Ä: $size"
            echo "   –°—Ç—Ä–æ–∫: $lines"
            echo "   –ò–∑–º–µ–Ω–µ–Ω: $modified"
            echo ""
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–≥–∞—Ö
search_logs() {
    local pattern="$1"
    local context="${2:-3}"

    if [ -z "$pattern" ]; then
        echo -e "${RED}‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞${NC}"
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 search 'error pattern' [–∫–æ–Ω—Ç–µ–∫—Å—Ç]"
        return 1
    fi

    echo -e "${BLUE}üîç –ü–æ–∏—Å–∫ '$pattern' –≤ –ª–æ–≥–∞—Ö (–∫–æ–Ω—Ç–µ–∫—Å—Ç: $context —Å—Ç—Ä–æ–∫):${NC}"
    echo "$(printf '=%.0s' {1..60})"

    for log_file in "$LOGS_DIR"/*.log; do
        if [ -f "$log_file" ] && [ -s "$log_file" ]; then
            local filename=$(basename "$log_file")
            local matches=$(grep -c "$pattern" "$log_file" 2>/dev/null)

            if [ "$matches" -gt 0 ]; then
                echo -e "${GREEN}üìÑ $filename ($matches —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π):${NC}"
                grep -C "$context" --color=always "$pattern" "$log_file" | head -20
                echo ""
            fi
        fi
    done
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "$1" in
        "interactive" | "i")
            interactive_viewer
            ;;
        "api")
            pretty_logs "$LOGS_DIR/backend-api.log" "${2:-50}"
            ;;
        "api-out")
            pretty_logs "$LOGS_DIR/backend-api-out.log" "${2:-50}"
            ;;
        "api-error")
            pretty_logs "$LOGS_DIR/backend-api-error.log" "${2:-50}"
            ;;
        "errors")
            echo -e "${RED}üö® –í—Å–µ –æ—à–∏–±–∫–∏:${NC}"
            pretty_logs "$LOGS_DIR/backend-api-error.log" 30
            pretty_logs "$LOGS_DIR/backend-worker-error.log" 30
            ;;
        "stats")
            show_log_stats
            ;;
        "search")
            search_logs "$2" "$3"
            ;;
        "follow")
            echo -e "${BLUE}üì° –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ API...${NC}"
            echo "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
            tail -f "$LOGS_DIR/backend-api.log" "$LOGS_DIR/backend-api-out.log" "$LOGS_DIR/backend-api-error.log"
            ;;
        *)
            echo -e "${BLUE}üîç Log Viewer –¥–ª—è Yandex Parser API${NC}"
            echo ""
            echo -e "${GREEN}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
            echo "  interactive, i  - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"
            echo "  api [lines]     - API –ª–æ–≥–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 —Å—Ç—Ä–æ–∫)"
            echo "  api-out [lines] - API stdout"
            echo "  api-error [lines] - API –æ—à–∏–±–∫–∏"
            echo "  errors          - –í—Å–µ –æ—à–∏–±–∫–∏"
            echo "  stats           - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤"
            echo "  search 'pattern' [context] - –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö"
            echo "  follow          - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
            echo ""
            echo -e "${YELLOW}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
            echo "  ./log-viewer.sh interactive"
            echo "  ./log-viewer.sh api-error 100"
            echo "  ./log-viewer.sh search 'TypeError' 5"
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"
