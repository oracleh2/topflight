#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ø–Ω–¥–µ–∫—Å–∞ –∏–∑ GitHub gist –≤ —Ç–∞–±–ª–∏—Ü—É yandex_regions

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
cd backend/
python scripts/import_yandex_regions.py

–û–ø—Ü–∏–∏:
--clear     - –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
--dry-run   - –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏
--batch-size N - –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
--source URL - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import argparse
import sys
import requests
import json
from pathlib import Path
from typing import Dict, List, Set
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent.parent))

from app.database import async_session_maker
from app.models.yandex_region import YandexRegion
from sqlalchemy import select, func, delete, text


# URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
DEFAULT_GIST_URL = (
    "https://gist.githubusercontent.com/gorborukov/0722a93c35dfba96337b/raw"
)

# –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–¥—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ø–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
YANDEX_REGION_CODES = {
    "–ú–æ—Å–∫–≤–∞": "213",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "2",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "54",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "65",
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": "35",
    "–í–æ—Ä–æ–Ω–µ–∂": "193",
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": "47",
    "–ö–∞–∑–∞–Ω—å": "43",
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": "56",
    "–û–º—Å–∫": "66",
    "–°–∞–º–∞—Ä–∞": "51",
    "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É": "39",
    "–£—Ñ–∞": "172",
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": "62",
    "–ü–µ—Ä–º—å": "50",
    "–í–æ–ª–≥–æ–≥—Ä–∞–¥": "38",
    "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫": "20",
    "–°–∞—Ä–∞—Ç–æ–≤": "194",
    "–£–ª—å—è–Ω–æ–≤—Å–∫": "195",
    "–ë–∞—Ä–Ω–∞—É–ª": "197",
    "–£–ª–∞–Ω-–£–¥—ç": "198",
    "–ë—Ä—è–Ω—Å–∫": "191",
    "–í–ª–∞–¥–∏–º–∏—Ä": "192",
    "–ë–µ–ª–≥–æ—Ä–æ–¥": "4",
    "–ò–≤–∞–Ω–æ–≤–æ": "5",
    "–ö–∞–ª—É–≥–∞": "6",
    "–ö–æ—Å—Ç—Ä–æ–º–∞": "7",
    "–ö—É—Ä—Å–∫": "8",
    "–õ–∏–ø–µ—Ü–∫": "9",
    "–û—Ä—ë–ª": "10",
    "–†—è–∑–∞–Ω—å": "12",
    "–°–º–æ–ª–µ–Ω—Å–∫": "13",
    "–¢–∞–º–±–æ–≤": "14",
    "–¢–≤–µ—Ä—å": "15",
    "–¢—É–ª–∞": "16",
    "–Ø—Ä–æ—Å–ª–∞–≤–ª—å": "17",
    "–ß–µ–±–æ–∫—Å–∞—Ä—ã": "21",
    "–ô–æ—à–∫–∞—Ä-–û–ª–∞": "22",
    "–°–∞—Ä–∞–Ω—Å–∫": "23",
    "–ò–∂–µ–≤—Å–∫": "24",
    "–°—ã–∫—Ç—ã–≤–∫–∞—Ä": "25",
    "–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫": "26",
    "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫": "27",
    "–í–æ–ª–æ–≥–¥–∞": "28",
    "–ú—É—Ä–º–∞–Ω—Å–∫": "29",
    "–ü—Å–∫–æ–≤": "30",
    "–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": "31",
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": "32",
}


class RegionImporter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ GitHub gist"""

    def __init__(self, source_url: str = DEFAULT_GIST_URL):
        self.source_url = source_url
        self.used_codes: Set[str] = set()
        self.stats = {
            "total_processed": 0,
            "successful_imports": 0,
            "errors": 0,
            "duplicates": 0,
        }

    def fetch_data(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ GitHub gist"""
        print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.source_url}")

        try:
            response = requests.get(self.source_url, timeout=30)
            response.raise_for_status()

            data = response.json()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
            return data

        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return []
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return []

    def generate_region_code(self, city_name: str, region_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–¥—ã
        if city_name in YANDEX_REGION_CODES:
            code = YANDEX_REGION_CODES[city_name]
            if code not in self.used_codes:
                return code

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞
        city_hash = abs(hash(city_name + region_name)) % 9999
        code = str(city_hash)

        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–æ–¥ —É–Ω–∏–∫–∞–ª–µ–Ω
        counter = 1
        original_code = code
        while code in self.used_codes:
            code = f"{original_code}_{counter}"
            counter += 1

        return code

    def determine_region_type(self, region_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ä–µ–≥–∏–æ–Ω–∞"""
        region_lower = region_name.lower()

        if any(word in region_lower for word in ["–æ–±–ª.", "–æ–±–ª–∞—Å—Ç—å"]):
            return "region"
        elif any(word in region_lower for word in ["–∫—Ä–∞–π"]):
            return "region"
        elif any(word in region_lower for word in ["–∞–æ", "–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π"]):
            return "region"
        elif any(word in region_lower for word in ["—Ä–µ—Å–ø.", "—Ä–µ—Å–ø—É–±–ª–∏–∫–∞"]):
            return "region"
        elif region_lower in ["—Ä–æ—Å—Å–∏—è", "russia"]:
            return "country"
        else:
            return "city"

    def create_region_object(self, item: Dict) -> YandexRegion:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç YandexRegion –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        city = item.get("city", "").strip()
        region = item.get("region", "").strip()

        if not city or not region:
            raise ValueError("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
        region_code = self.generate_region_code(city, region)
        self.used_codes.add(region_code)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–≥–∏–æ–Ω–∞
        region_type = self.determine_region_type(region)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        search_name = f"{city} {region}".replace("–æ–±–ª.", "–æ–±–ª–∞—Å—Ç—å").replace(
            "—Ä–µ—Å–ø.", "—Ä–µ—Å–ø—É–±–ª–∏–∫–∞"
        )

        return YandexRegion(
            region_code=region_code,
            region_name=city,
            country_code="RU",
            region_type=region_type,
            is_active=True,
            display_name=city,
            search_name=search_name,
        )

    async def clear_table(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º"""
        async with async_session_maker() as session:
            try:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑—É—è ORM
                count_query = await session.execute(select(func.count(YandexRegion.id)))
                total = count_query.scalar()

                if total > 0:
                    print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ {total} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π...")
                    await session.execute(delete(YandexRegion))
                    await session.commit()
                    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞")
                else:
                    print("üìù –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ –ø—É—Å—Ç–∞")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
                await session.rollback()
                raise

    async def import_regions(
        self, regions_data: List[Dict], batch_size: int = 100, dry_run: bool = False
    ):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–≥–∏–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""

        if dry_run:
            print("üîç –†–µ–∂–∏–º dry-run: –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î")

        async with async_session_maker() as session:
            batch = []

            for item in regions_data:
                try:
                    self.stats["total_processed"] += 1

                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ–≥–∏–æ–Ω–∞
                    region = self.create_region_object(item)

                    if dry_run:
                        print(
                            f"  {region.region_code}: {region.region_name} ({region.region_type})"
                        )
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –∏—Å–ø–æ–ª—å–∑—É—è ORM
                    existing_query = await session.execute(
                        select(YandexRegion.id).where(
                            YandexRegion.region_code == region.region_code
                        )
                    )
                    existing = existing_query.first()

                    if existing:
                        self.stats["duplicates"] += 1
                        print(
                            f"‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç –∫–æ–¥–∞ {region.region_code}: {region.region_name}"
                        )
                        continue

                    batch.append(region)

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                    if len(batch) >= batch_size:
                        await self._process_batch(session, batch)
                        batch = []

                except Exception as e:
                    self.stats["errors"] += 1
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {item}: {e}")
                    continue

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
            if batch and not dry_run:
                await self._process_batch(session, batch)

    async def _process_batch(self, session, batch: List[YandexRegion]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á –∑–∞–ø–∏—Å–µ–π"""
        try:
            session.add_all(batch)
            await session.commit()

            self.stats["successful_imports"] += len(batch)
            print(
                f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(batch)} –∑–∞–ø–∏—Å–µ–π (–≤—Å–µ–≥–æ: {self.stats['successful_imports']})"
            )

        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –±–∞—Ç—á–∞: {e}")
            raise

    def print_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞"""
        print("\n" + "=" * 50)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–ê")
        print("=" * 50)
        print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:     {self.stats['total_processed']}")
        print(f"–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {self.stats['successful_imports']}")
        print(f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤:           {self.stats['duplicates']}")
        print(f"–û—à–∏–±–æ–∫:               {self.stats['errors']}")
        print("=" * 50)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–ò–º–ø–æ—Ä—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ø–Ω–¥–µ–∫—Å–∞ –∏–∑ GitHub gist"
    )
    parser.add_argument(
        "--clear", action="store_true", help="–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º"
    )
    parser.add_argument(
        "--dry-run", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ"
    )
    parser.add_argument(
        "--batch-size", type=int, default=100, help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏"
    )
    parser.add_argument(
        "--source", type=str, default=DEFAULT_GIST_URL, help="URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
    )

    args = parser.parse_args()

    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ø–Ω–¥–µ–∫—Å–∞")
    print(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {args.source}")
    print(f"–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {args.batch_size}")
    print(f"–†–µ–∂–∏–º dry-run: {args.dry_run}")
    print("")

    # –°–æ–∑–¥–∞–µ–º –∏–º–ø–æ—Ä—Ç–µ—Ä
    importer = RegionImporter(args.source)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        regions_data = importer.fetch_data()

        if not regions_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
            return 1

        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if args.clear and not args.dry_run:
            await importer.clear_table()

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        await importer.import_regions(
            regions_data, batch_size=args.batch_size, dry_run=args.dry_run
        )

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        importer.print_stats()

        if not args.dry_run:
            print("\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            print("  SELECT COUNT(*) FROM yandex_regions;")
            print(
                "  SELECT region_code, region_name, region_type FROM yandex_regions LIMIT 10;"
            )

        return 0

    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
