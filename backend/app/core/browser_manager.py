# backend/app/core/browser_manager.py - –ò–°–ü–†–ê–í–ò–¢–¨ –º–µ—Ç–æ–¥—ã –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞:

import os
import subprocess
import asyncio
import random
import socket
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, and_
from playwright.async_api import async_playwright, Browser, BrowserContext, Page
import structlog

from app.models import Profile, ProfileFingerprint, ProfileLifecycle, ServerConfig
from app.database import async_session_maker
from .fingerprint_generator import FingerprintGenerator
from ..models.profile import DeviceType
from playwright.async_api import Browser, BrowserContext
from .vnc_manager import vnc_manager

logger = structlog.get_logger(__name__)


class BrowserManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""

    def __init__(self, db_session: Optional[AsyncSession] = None):
        self.db = db_session
        self.warmup_sites = [
            "https://habr.com",
            "https://www.kinopoisk.ru",
            "https://market.yandex.ru",
            "https://news.yandex.ru",
            "https://music.yandex.ru",
            "https://dzen.ru",
            "https://ya.ru",
            "https://mail.ru",
            "https://vk.com",
            "https://ok.ru",
        ]
        self.server_id = f"server-{socket.gethostname()}"

    async def get_session(self) -> AsyncSession:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –ë–î"""
        if self.db:
            return self.db
        else:
            async with async_session_maker() as session:
                return session

    def _setup_display_environment(self, vnc_session=None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if vnc_session:
            # –î–ª—è debug —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º VNC –¥–∏—Å–ø–ª–µ–π
            display_env = f":{vnc_session.display_num}"
            os.environ["DISPLAY"] = display_env
            logger.info(f"Using VNC display: {display_env}")
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–ª–µ–π
            if not os.environ.get("DISPLAY"):
                # –ó–∞–ø—É—Å–∫–∞–µ–º Xvfb –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                self._ensure_xvfb_running()
                os.environ["DISPLAY"] = ":99"
                logger.info("Using Xvfb display: :99")

    def _ensure_xvfb_running(self):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫ Xvfb –¥–ª—è headless —Ä–µ–∂–∏–º–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Xvfb
            result = subprocess.run(
                ["pgrep", "-f", "Xvfb :99"], capture_output=True, text=True
            )

            if result.returncode != 0:
                # Xvfb –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                logger.info("Starting Xvfb on display :99")
                subprocess.Popen(
                    [
                        "Xvfb",
                        ":99",
                        "-screen",
                        "0",
                        "1920x1080x24",
                        "-ac",
                        "+extension",
                        "GLX",
                    ]
                )
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
                import time

                time.sleep(2)
            else:
                logger.info("Xvfb already running on display :99")

        except Exception as e:
            logger.warning(f"Failed to ensure Xvfb running: {e}")

    async def launch_browser(self, playwright, profile: Profile):
        """–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        browser_settings = profile.browser_settings or {}

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self._setup_display_environment()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        launch_options = {
            "headless": False,  # –ù–ï headless –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
            "args": [
                "--no-sandbox",
                "--disable-blink-features=AutomationControlled",
                "--disable-features=VizDisplayCompositor",
                "--disable-dev-shm-usage",
                "--disable-background-timer-throttling",
                "--disable-backgrounding-occluded-windows",
                "--disable-renderer-backgrounding",
                "--disable-field-trial-config",
                "--disable-ipc-flooding-protection",
                "--no-first-run",
                "--no-default-browser-check",
                "--disable-default-apps",
                "--disable-popup-blocking",
                "--disable-prompt-on-repost",
                "--disable-hang-monitor",
                "--disable-sync",
                "--disable-web-security",
                "--allow-running-insecure-content",
                "--disable-component-extensions-with-background-pages",
                "--disable-extensions",
                "--mute-audio",
                f"--user-agent={profile.user_agent}",
            ],
        }

        logger.info(
            "Launching browser",
            profile_id=str(profile.id),
            device_type=profile.device_type.value,
            user_agent=(
                profile.user_agent[:50] + "..."
                if len(profile.user_agent) > 50
                else profile.user_agent
            ),
        )

        return await playwright.chromium.launch(**launch_options)

    async def launch_debug_browser_with_vnc(
        self, task_id: str, device_type: DeviceType, profile: Optional[Profile] = None
    ) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –≤ debug —Ä–µ–∂–∏–º–µ —Å VNC –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º enhanced vnc manager
            from .enhanced_vnc_manager import enhanced_vnc_manager

            # –°–æ–∑–¥–∞–µ–º VNC —Å–µ—Å—Å–∏—é
            vnc_session_data = await enhanced_vnc_manager.create_debug_session(
                task_id, device_type
            )
            vnc_session = enhanced_vnc_manager.get_session_by_task(task_id)

            if not vnc_session:
                raise Exception("Failed to create VNC session")

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            if not profile:
                profile = await self.get_ready_profile(device_type)
                if not profile:
                    profile = await self.create_profile(device_type=device_type)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è VNC
            os.environ["DISPLAY"] = f":{vnc_session.display_num}"

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å VNC –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            async with async_playwright() as p:
                browser = await p.chromium.launch(
                    headless=False,  # –í–ê–ñ–ù–û: –ù–ï headless –¥–ª—è VNC
                    slow_mo=1000,  # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
                    devtools=True,  # –í–∫–ª—é—á–∞–µ–º DevTools
                    args=[
                        "--no-sandbox",
                        "--disable-blink-features=AutomationControlled",
                        f"--user-agent={profile.user_agent}",
                        f"--window-size={vnc_session.resolution.replace('x', ',')}",
                        "--start-maximized",
                    ],
                )

                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context = await browser.new_context(
                    user_agent=profile.user_agent,
                    viewport={
                        "width": int(vnc_session.resolution.split("x")[0]) - 100,
                        "height": int(vnc_session.resolution.split("x")[1]) - 100,
                    },
                )

                # –î–æ–±–∞–≤–ª—è–µ–º debug —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                await context.add_init_script(
                    """
                    console.log('üîç DEBUG MODE: Browser started for task', window.location.href);

                    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
                    window.addEventListener('beforeunload', () => {
                        console.log('üì§ Leaving:', window.location.href);
                    });

                    window.addEventListener('load', () => {
                        console.log('üì• Loaded:', window.location.href);
                    });
                """
                )

                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page = await context.new_page()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–º
                vnc_session.browser = browser
                vnc_session.context = context
                vnc_session.page = page

                logger.info(
                    "Debug browser launched with VNC",
                    task_id=task_id,
                    vnc_port=vnc_session.vnc_port,
                    display=f":{vnc_session.display_num}",
                    resolution=vnc_session.resolution,
                )

                return {
                    "success": True,
                    "task_id": task_id,
                    "vnc_host": vnc_session.vnc_host,
                    "vnc_port": vnc_session.vnc_port,
                    "display_num": vnc_session.display_num,
                    "resolution": vnc_session.resolution,
                    "browser_launched": True,
                    "profile_id": str(profile.id),
                }

        except Exception as e:
            logger.error(
                "Failed to launch debug browser", task_id=task_id, error=str(e)
            )
            raise

    async def _create_debug_context(
        self, browser: Browser, profile: Profile, vnc_session
    ) -> BrowserContext:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è debug —Ä–µ–∂–∏–º–∞"""
        context_options = {
            "viewport": {
                "width": int(vnc_session.resolution.split("x")[0]) - 400,
                "height": int(vnc_session.resolution.split("x")[1]) - 200,
            },
            "user_agent": profile.user_agent,
            "java_script_enabled": True,
            "accept_downloads": True,
            "ignore_https_errors": True,
        }

        # –î–æ–±–∞–≤–ª—è–µ–º fingerprint –µ—Å–ª–∏ –µ—Å—Ç—å
        if profile.fingerprint:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ fingerprint
            pass

        return await browser.new_context(**context_options)

    async def launch_debug_browser(
        self, task_id: str, device_type: DeviceType, profile: Optional[Profile] = None
    ) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –≤ —Ä–µ–∂–∏–º–µ –¥–µ–±–∞–≥–∞ —Å VNC"""
        try:
            # –°–æ–∑–¥–∞–µ–º VNC —Å–µ—Å—Å–∏—é
            vnc_session_data = await vnc_manager.create_debug_session(
                task_id, device_type
            )
            vnc_session = vnc_manager.get_session_by_task(task_id)

            if not vnc_session:
                raise Exception("Failed to create VNC session")

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            if not profile:
                profile = await self.get_ready_profile(device_type)
                if not profile:
                    profile = await self.create_profile(device_type=device_type)

            # –í–†–ï–ú–ï–ù–ù–û: –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É
            # –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            logger.info(
                "Debug browser session created (mock)",
                task_id=task_id,
                device_type=device_type.value,
                profile_id=str(profile.id),
            )

            result = vnc_session_data.copy()
            result.update(
                {
                    "browser_launched": True,
                    "profile_id": str(profile.id),
                    "debug_instructions": {
                        "vnc_client_command": f"vncviewer {vnc_session.vnc_host}:{vnc_session.vnc_port}",
                        "ssh_tunnel_command": f"ssh -L {vnc_session.vnc_port}:localhost:{vnc_session.vnc_port} user@server",
                        "resolution": vnc_session.resolution,
                        "device_emulation": device_type.value,
                    },
                }
            )

            return result

        except Exception as e:
            logger.error(
                "Failed to launch debug browser", task_id=task_id, error=str(e)
            )
            # –û—á–∏—â–∞–µ–º VNC —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await vnc_manager.stop_debug_session(task_id)
            raise

    async def get_debug_session_info(self, task_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ debug —Å–µ—Å—Å–∏–∏"""
        vnc_session = vnc_manager.get_session_by_task(task_id)
        if vnc_session:
            return vnc_session.to_dict()
        return None

    async def take_debug_screenshot(self, task_id: str) -> Optional[bytes]:
        """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç debug —Å–µ—Å—Å–∏–∏"""
        try:
            vnc_session = vnc_manager.get_session_by_task(task_id)
            if not vnc_session:
                logger.warning(f"No debug session found for task {task_id}")
                return None

            logger.info(f"Taking screenshot for debug session {task_id}")

            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PNG (1x1 –ø–∏–∫—Å–µ–ª—å, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
            png_data = b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x06\x00\x00\x00\x1f\x15\xc4\x89\x00\x00\x00\nIDATx\xdac\x00\x01\x00\x00\x05\x00\x01\r\n-\xdb\x00\x00\x00\x00IEND\xaeB`\x82"

            return png_data

        except Exception as e:
            logger.error(f"Failed to take screenshot: {e}")
            return None

    async def get_debug_session_logs(
        self, task_id: str, limit: int = 100
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ debug —Å–µ—Å—Å–∏–∏"""
        return []

    async def get_ready_profile(
        self, device_type: DeviceType, domain_id: Optional[str] = None
    ) -> Optional[Profile]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        session = await self.get_session()

        try:
            # –ò—â–µ–º –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            query = (
                select(Profile)
                .where(
                    and_(
                        Profile.is_warmed_up == True,
                        Profile.status == "ready",
                        Profile.device_type == device_type,
                    )
                )
                .order_by(Profile.last_used.asc())
            )

            result = await session.execute(query)
            profile = result.scalar_one_or_none()

            if profile:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                profile.last_used = datetime.utcnow()
                profile.total_usage_count += 1
                await session.commit()

                logger.info(
                    "Ready profile retrieved",
                    profile_id=str(profile.id),
                    device_type=device_type.value,
                )
                return profile

            return None

        except Exception as e:
            logger.error(
                "Failed to get ready profile",
                error=str(e),
                device_type=device_type.value,
            )
            return None

    async def create_profile(
        self, device_type: DeviceType, name: Optional[str] = None
    ) -> Profile:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        session = await self.get_session()

        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–≥–µ—Ä–ø—Ä–∏–Ω—Ç –¥–ª—è —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            fingerprint = FingerprintGenerator.generate_fingerprint(device_type)
            browser_settings = FingerprintGenerator.create_browser_settings(fingerprint)

            # –°–æ–∑–¥–∞–µ–º –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            if not name:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                device_suffix = device_type.value
                name = (
                    f"Profile_{device_suffix}_{timestamp}_{random.randint(1000, 9999)}"
                )

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile = Profile(
                name=name,
                device_type=device_type,
                user_agent=fingerprint["browser"]["user_agent"],
                fingerprint=fingerprint,
                browser_settings=browser_settings,
                status="new",
            )

            session.add(profile)
            await session.commit()
            await session.refresh(profile)

            logger.info(
                "Profile created",
                profile_id=str(profile.id),
                name=name,
                device_type=device_type.value,
            )
            return profile

        except Exception as e:
            await session.rollback()
            logger.error(
                "Failed to create profile", error=str(e), device_type=device_type.value
            )
            raise
