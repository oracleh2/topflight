# backend/app/workers/profile_nurture_worker.py - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å VNC debug

import asyncio
import structlog
from typing import Dict, Any, Optional, List
from datetime import datetime, timezone
import random
import os

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from playwright.async_api import async_playwright, Browser, BrowserContext, Page

from app.database import async_session_maker
from app.core.task_manager import TaskManager, TaskType, TaskStatus
from app.core.browser_manager import BrowserManager
from app.models import Task, Profile, DeviceType
from app.constants.strategies import ProfileNurtureType

logger = structlog.get_logger(__name__)


class ProfileNurtureWorker:
    """Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –Ω–∞–≥—É–ª–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π VNC debug"""

    def __init__(self):
        self.is_running = False
        self.worker_id = f"nurture_worker_{random.randint(1000, 9999)}"

    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å worker"""
        self.is_running = True
        logger.info("Profile nurture worker started", worker_id=self.worker_id)

        while self.is_running:
            try:
                await self._process_batch()
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∞–º–∏
            except Exception as e:
                logger.error(
                    "Error in worker main loop", worker_id=self.worker_id, error=str(e)
                )
                await asyncio.sleep(10)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å worker"""
        self.is_running = False
        logger.info("Profile nurture worker stopped", worker_id=self.worker_id)

    async def _process_batch(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞–∫–µ—Ç –∑–∞–¥–∞—á"""
        async with async_session_maker() as session:
            task_manager = TaskManager(session)

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            tasks = await task_manager.get_pending_nurture_tasks(limit=5)

            if not tasks:
                return

            logger.info(
                "Processing nurture tasks batch",
                worker_id=self.worker_id,
                tasks_count=len(tasks),
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(
                *[self._process_task(task) for task in tasks], return_exceptions=True
            )

    async def _process_task(self, task: Task):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É –Ω–∞–≥—É–ª–∞"""
        async with async_session_maker() as session:
            task_manager = TaskManager(session)
            browser_manager = BrowserManager(session)

            try:
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –∑–∞–ø—É—â–µ–Ω–Ω—É—é
                success = await task_manager.mark_task_started(
                    str(task.id), self.worker_id
                )
                if not success:
                    logger.warning(
                        "Failed to mark task as started", task_id=str(task.id)
                    )
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ debug —Ä–µ–∂–∏–º
                debug_enabled = task.parameters.get("debug_enabled", False)
                device_type = DeviceType(task.device_type)

                if debug_enabled:
                    logger.info(
                        "üîç Starting task in DEBUG mode",
                        task_id=str(task.id),
                        worker_id=self.worker_id,
                        device_type=device_type.value,
                    )
                    result = await self._execute_debug_task(
                        task, browser_manager, device_type
                    )
                else:
                    logger.info(
                        "Starting profile nurture task",
                        task_id=str(task.id),
                        worker_id=self.worker_id,
                        strategy_id=task.parameters.get("strategy_id"),
                    )
                    result = await self._execute_normal_task(
                        task, browser_manager, device_type
                    )

                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
                await task_manager.mark_task_completed(str(task.id), result)

                logger.info(
                    "Profile nurture task completed",
                    task_id=str(task.id),
                    worker_id=self.worker_id,
                    debug_mode=debug_enabled,
                    cookies_collected=result.get("cookies_collected", 0),
                )

            except Exception as e:
                logger.error(
                    "Profile nurture task failed",
                    task_id=str(task.id),
                    worker_id=self.worker_id,
                    error=str(e),
                )
                await task_manager.mark_task_failed(str(task.id), str(e))

    async def _execute_debug_task2(
        self, task: Task, browser_manager: BrowserManager, device_type: DeviceType
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤ debug —Ä–µ–∂–∏–º–µ - –≤—Ä–µ–º–µ–Ω–Ω–æ –ë–ï–ó VNC"""
        try:
            logger.info(
                "üîç Starting DEBUG task WITHOUT VNC (temporary)",
                task_id=str(task.id),
                device_type=device_type.value,
            )

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            if task.profile_id:
                profile = await self._get_existing_profile(
                    browser_manager.db, task.profile_id
                )
            else:
                profile = await browser_manager.create_profile(device_type=device_type)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ë–ï–ó VNC (–ø–æ–∫–∞ —á—Ç–æ)
            async with async_playwright() as p:
                browser = await p.chromium.launch(
                    headless=False,  # –í—Å–µ —Ä–∞–≤–Ω–æ –ù–ï headless
                    slow_mo=2000,  # –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –≤ –ª–æ–≥–∞—Ö
                    devtools=True,  # DevTools
                    args=[
                        "--no-sandbox",
                        "--disable-blink-features=AutomationControlled",
                        f"--user-agent={profile.user_agent}",
                        "--window-size=1920,1080",
                        "--disable-web-security",
                        "--allow-running-insecure-content",
                    ],
                )

                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context = await browser.new_context(
                    user_agent=profile.user_agent,
                    viewport={"width": 1920, "height": 1080},
                    ignore_https_errors=True,
                )

                # –î–æ–±–∞–≤–ª—è–µ–º debug —Å–∫—Ä–∏–ø—Ç
                await context.add_init_script(
                    f"""
                    console.log('üîç DEBUG MODE: Browser started for task {task.id}');
                    console.log('üéØ Current URL:', window.location.href);

                    window.addEventListener('load', () => {{
                        console.log('üì• Loaded:', window.location.href);
                        console.log('üç™ Cookies:', document.cookie.split(';').length);
                    }});

                    window.DEBUG_TASK_ID = '{task.id}';
                """
                )

                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page = await context.new_page()

                try:
                    logger.info("üöÄ Starting debug nurture process")

                    # –í—ã–ø–æ–ª–Ω—è–µ–º debug –Ω–∞–≥—É–ª
                    result = await self._execute_debug_nurture(
                        task, page, context, device_type
                    )

                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–∫–æ–≤
                    final_cookies = await context.cookies()
                    result["cookies_collected"] = len(final_cookies)
                    result["debug_mode"] = True
                    result["vnc_session"] = None  # –ü–æ–∫–∞ VNC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

                    logger.info(
                        "‚úÖ Debug task completed successfully",
                        task_id=str(task.id),
                        cookies_collected=len(final_cookies),
                        sites_visited=result.get("sites_visited", 0),
                    )

                    return result

                finally:
                    # –î–µ—Ä–∂–∏–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
                    logger.info(
                        "üîç Debug session completed. Keeping browser open for 30 seconds..."
                    )
                    await asyncio.sleep(30)

                    await context.close()
                    await browser.close()

        except Exception as e:
            logger.error(f"‚ùå Debug task failed: {e}")
            raise

    async def _execute_debug_task(
        self, task: Task, browser_manager: BrowserManager, device_type: DeviceType
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤ debug —Ä–µ–∂–∏–º–µ —Å VNC"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º enhanced vnc manager
            from app.core.enhanced_vnc_manager import enhanced_vnc_manager

            # –°–æ–∑–¥–∞–µ–º VNC —Å–µ—Å—Å–∏—é
            vnc_session_data = await enhanced_vnc_manager.create_debug_session(
                str(task.id), device_type
            )
            vnc_session = enhanced_vnc_manager.get_session_by_task(str(task.id))

            if not vnc_session:
                raise Exception("Failed to create VNC session")

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            if task.profile_id:
                profile = await self._get_existing_profile(
                    browser_manager.db, task.profile_id
                )
            else:
                profile = await browser_manager.create_profile(device_type=device_type)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è VNC
            os.environ["DISPLAY"] = f":{vnc_session.display_num}"

            logger.info(
                "üéØ VNC Debug session ready",
                task_id=str(task.id),
                vnc_port=vnc_session.vnc_port,
                display=f":{vnc_session.display_num}",
                connect_command=f"vncviewer localhost:{vnc_session.vnc_port}",
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å VNC –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            async with async_playwright() as p:
                profile_dir = f"/tmp/browser_profile_{task.id}"
                os.makedirs(profile_dir, exist_ok=True)

                browser = await p.chromium.launch(
                    headless=False,  # –í–ê–ñ–ù–û: –ù–ï headless –¥–ª—è VNC
                    slow_mo=1500,  # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
                    devtools=True,  # –í–∫–ª—é—á–∞–µ–º DevTools
                    args=[
                        "--no-sandbox",
                        "--disable-blink-features=AutomationControlled",
                        f"--user-agent={profile.user_agent}",
                        f"--window-size={vnc_session.resolution.replace('x', ',')}",
                        "--start-maximized",
                        "--disable-web-security",
                        "--allow-running-insecure-content",
                        "--no-first-run",
                        "--no-default-browser-check",
                        "--disable-background-timer-throttling",
                        "--disable-backgrounding-occluded-windows",
                        "--disable-renderer-backgrounding",
                        # –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ —Ä–µ–∂–∏–º:
                        "--disable-features=TranslateUI",
                        "--disable-extensions-except",
                        "--disable-component-extensions-with-background-pages=false",
                    ],
                )

                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context = await browser.new_context(
                    user_agent=profile.user_agent,
                    viewport={
                        "width": int(vnc_session.resolution.split("x")[0]) - 100,
                        "height": int(vnc_session.resolution.split("x")[1]) - 100,
                    },
                    ignore_https_errors=True,
                )

                # –î–æ–±–∞–≤–ª—è–µ–º debug —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                await context.add_init_script(
                    f"""
                    console.log('üîç DEBUG MODE: Browser started for task {task.id}');
                    console.log('üéØ Current URL:', window.location.href);

                    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
                    window.addEventListener('beforeunload', () => {{
                        console.log('üì§ Leaving:', window.location.href);
                    }});

                    window.addEventListener('load', () => {{
                        console.log('üì• Loaded:', window.location.href);
                        console.log('üç™ Cookies:', document.cookie.split(';').length);
                    }});

                    // –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ window –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    window.DEBUG_TASK_ID = '{task.id}';
                """
                )

                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page = await context.new_page()

                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º debug –Ω–∞–≥—É–ª
                    result = await self._execute_debug_nurture(
                        task, page, context, device_type
                    )

                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–∫–æ–≤
                    final_cookies = await context.cookies()
                    result["cookies_collected"] = len(final_cookies)
                    result["debug_mode"] = True
                    result["vnc_session"] = {
                        "vnc_port": vnc_session.vnc_port,
                        "display_num": vnc_session.display_num,
                        "resolution": vnc_session.resolution,
                    }

                    return result

                finally:
                    # –î–µ—Ä–∂–∏–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
                    logger.info(
                        "üîç Debug session completed. Browser will stay open for inspection."
                    )
                    logger.info(
                        f"üéØ Connect with: vncviewer localhost:{vnc_session.vnc_port}"
                    )

                    # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
                    await asyncio.sleep(30)

                    await context.close()
                    await browser.close()

                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º VNC —Å–µ—Å—Å–∏—é
                    await enhanced_vnc_manager.stop_debug_session(str(task.id))

        except Exception as e:
            logger.error(f"‚ùå Debug task failed: {e}")
            # –û—á–∏—â–∞–µ–º VNC —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                from app.core.enhanced_vnc_manager import enhanced_vnc_manager

                await enhanced_vnc_manager.stop_debug_session(str(task.id))
            except:
                pass
            raise

    async def _execute_debug_nurture(
        self, task: Task, page: Page, context: BrowserContext, device_type: DeviceType
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–≥—É–ª –≤ debug —Ä–µ–∂–∏–º–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º VNC"""

        # –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è –¥–µ–±–∞–≥–∞ (–≤–∫–ª—é—á–∞—è ya.ru)
        debug_sites = [
            "https://ya.ru",
            "https://www.ozon.ru",
            "https://market.yandex.ru",
            "https://habr.com",
            "https://www.kinopoisk.ru",
        ]

        logger.info(f"üöÄ Starting debug visits to {len(debug_sites)} sites")

        sites_visited = []
        total_interactions = 0

        for i, site in enumerate(debug_sites):
            try:
                logger.info(f"üåê [{i+1}/{len(debug_sites)}] Visiting: {site}")

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç
                await page.goto(site, wait_until="domcontentloaded", timeout=30000)

                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
                await page.wait_for_timeout(3000)

                # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
                await page.evaluate(
                    f"""
                    console.log('üéØ DEBUG: Page loaded - {site}');
                    console.log('üìÑ Title:', document.title);
                    console.log('üç™ Cookies count:', document.cookie.split(';').filter(c => c.trim()).length);
                    console.log('üîó Links count:', document.querySelectorAll('a').length);
                """
                )

                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                interactions = await self._perform_debug_interactions(page, site)
                total_interactions += interactions

                sites_visited.append(site)

                # –ü–∞—É–∑–∞ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
                await page.wait_for_timeout(5000)

                logger.info(
                    f"‚úÖ Completed visit to {site} with {interactions} interactions"
                )

            except Exception as e:
                logger.error(f"‚ùå Failed to visit {site}: {e}")

        logger.info(
            f"üéâ Debug nurture completed. Visited {len(sites_visited)} sites with {total_interactions} total interactions"
        )

        return {
            "success": True,
            "nurture_type": "debug_visits",
            "sites_visited": len(sites_visited),
            "sites_list": sites_visited,
            "total_interactions": total_interactions,
            "completed_at": datetime.now(timezone.utc).isoformat(),
        }

    async def _perform_debug_interactions(self, page: Page, site: str) -> int:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è debug"""
        interactions = 0

        try:
            # –°–∫—Ä–æ–ª–ª–∏–Ω–≥
            for scroll in range(3):
                await page.mouse.wheel(0, 500)
                await page.wait_for_timeout(1000)
                interactions += 1

            # –î–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
            for move in range(2):
                x = random.randint(100, 800)
                y = random.randint(100, 600)
                await page.mouse.move(x, y)
                await page.wait_for_timeout(500)
                interactions += 1

            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —Å—Å—ã–ª–∫–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            try:
                links = await page.query_selector_all("a[href]")
                if links and len(links) > 0:
                    # –í—ã–±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Å—ã–ª–∫—É
                    link = random.choice(links[:5])  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å—Å—ã–ª–æ–∫

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤–∏–¥–∏–º–∞ –ª–∏ —Å—Å—ã–ª–∫–∞
                    is_visible = await link.is_visible()
                    if is_visible:
                        href = await link.get_attribute("href")
                        if href and not href.startswith("javascript:"):
                            await page.evaluate(
                                f"""
                                console.log('üñ±Ô∏è DEBUG: Clicking link:', '{href}');
                            """
                            )

                            await link.click()
                            await page.wait_for_timeout(2000)

                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
                            await page.go_back()
                            await page.wait_for_timeout(1000)
                            interactions += 1

            except Exception as e:
                logger.debug(f"Could not interact with links on {site}: {e}")

            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ñ–æ—Ä–º–∞–º–∏ –ø–æ–∏—Å–∫–∞
            try:
                search_inputs = await page.query_selector_all(
                    'input[type="search"], input[name*="search"], input[placeholder*="–ø–æ–∏—Å–∫"]'
                )
                if search_inputs:
                    search_input = search_inputs[0]
                    await search_input.fill("—Ç–µ—Å—Ç")
                    await page.wait_for_timeout(1000)
                    await search_input.clear()
                    interactions += 1

                    await page.evaluate(
                        """
                        console.log('üîç DEBUG: Interacted with search input');
                    """
                    )

            except Exception as e:
                logger.debug(f"Could not interact with search on {site}: {e}")

        except Exception as e:
            logger.error(f"Error performing interactions on {site}: {e}")

        return interactions

    async def _execute_normal_task(
        self, task: Task, browser_manager: BrowserManager, device_type: DeviceType
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ VNC)"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏
        strategy_config = task.parameters.get("strategy_config", {})
        nurture_type = strategy_config.get("nurture_type", "search_based")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–≥—É–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if nurture_type == "search_based":
            return await self._execute_search_based_nurture(
                task, strategy_config, browser_manager, device_type
            )
        elif nurture_type == "direct_visits":
            return await self._execute_direct_visits_nurture(
                task, strategy_config, browser_manager, device_type
            )
        elif nurture_type == "mixed_nurture":
            return await self._execute_mixed_nurture(
                task, strategy_config, browser_manager, device_type
            )
        else:
            raise ValueError(f"Unsupported nurture type: {nurture_type}")

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)

    async def _execute_search_based_nurture(
        self,
        task: Task,
        config: Dict[str, Any],
        browser_manager: BrowserManager,
        device_type: DeviceType,
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –Ω–∞–≥—É–ª"""

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        if task.profile_id:
            profile = await self._get_existing_profile(
                browser_manager.db, task.profile_id
            )
        else:
            profile = await browser_manager.create_profile(device_type=device_type)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ playwright
        async with async_playwright() as p:
            browser = await browser_manager.launch_browser(p, profile)

            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–≥—É–ª–∞
                target_cookies = config.get("target_cookies", {"min": 50, "max": 100})
                search_engines = config.get("search_engines", ["yandex.ru"])
                queries_source = config.get("queries_source", {})
                session_config = config.get("session_config", {})

                # –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–∫–æ–≤
                target_count = random.randint(
                    target_cookies["min"], target_cookies["max"]
                )

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
                queries = await self._get_search_queries(queries_source, limit=20)

                if not queries:
                    raise ValueError("No search queries available for nurturing")

                cookies_collected = 0
                sites_visited = []

                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞
                context = await browser.new_context(
                    user_agent=profile.user_agent,
                    viewport={"width": 1920, "height": 1080},
                )

                page = await context.new_page()

                for i, query in enumerate(queries[:target_count]):
                    if cookies_collected >= target_count:
                        break

                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
                    search_engine = random.choice(search_engines)

                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã
                    search_result = await self._perform_search_and_visits(
                        page, query, search_engine, session_config
                    )

                    cookies_collected += search_result.get("cookies_added", 0)
                    sites_visited.extend(search_result.get("sites_visited", []))

                    # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏
                    delay = random.uniform(3, 8)
                    await asyncio.sleep(delay)

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                cookies = await context.cookies()

                await context.close()

                return {
                    "success": True,
                    "nurture_type": "search_based",
                    "profile_id": str(profile.id),
                    "cookies_collected": len(cookies),
                    "target_cookies": target_count,
                    "sites_visited": len(sites_visited),
                    "sites_list": sites_visited,
                    "queries_used": len(queries),
                    "completed_at": datetime.now(timezone.utc).isoformat(),
                }

            finally:
                await browser.close()

    async def _execute_direct_visits_nurture(
        self,
        task: Task,
        config: Dict[str, Any],
        browser_manager: BrowserManager,
        device_type: DeviceType,
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–≥—É–ª –ø—Ä—è–º—ã–º–∏ –∑–∞—Ö–æ–¥–∞–º–∏"""

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        if task.profile_id:
            profile = await self._get_existing_profile(
                browser_manager.db, task.profile_id
            )
        else:
            profile = await browser_manager.create_profile(device_type=device_type)

        async with async_playwright() as p:
            browser = await browser_manager.launch_browser(p, profile)

            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                target_cookies = config.get("target_cookies", {"min": 50, "max": 100})
                direct_sites_source = config.get("direct_sites_source", {})
                session_config = config.get("session_config", {})

                target_count = random.randint(
                    target_cookies["min"], target_cookies["max"]
                )

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø—Ä—è–º—ã—Ö –∑–∞—Ö–æ–¥–æ–≤
                sites = await self._get_direct_sites(
                    direct_sites_source, limit=target_count
                )

                if not sites:
                    raise ValueError("No direct sites available for nurturing")

                cookies_collected = 0
                sites_visited = []

                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞
                context = await browser.new_context(
                    user_agent=profile.user_agent,
                    viewport={"width": 1920, "height": 1080},
                )

                page = await context.new_page()

                for site in sites[:target_count]:
                    if cookies_collected >= target_count:
                        break

                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—è–º–æ–π –∑–∞—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
                    visit_result = await self._perform_direct_visit(
                        page, site, session_config
                    )

                    cookies_collected += visit_result.get("cookies_added", 0)
                    sites_visited.append(site)

                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞—Ö–æ–¥–∞–º–∏
                    delay = random.uniform(2, 6)
                    await asyncio.sleep(delay)

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                cookies = await context.cookies()

                await context.close()

                return {
                    "success": True,
                    "nurture_type": "direct_visits",
                    "profile_id": str(profile.id),
                    "cookies_collected": len(cookies),
                    "target_cookies": target_count,
                    "sites_visited": len(sites_visited),
                    "sites_list": sites_visited,
                    "completed_at": datetime.now(timezone.utc).isoformat(),
                }

            finally:
                await browser.close()

    async def _execute_mixed_nurture(
        self,
        task: Task,
        config: Dict[str, Any],
        browser_manager: BrowserManager,
        device_type: DeviceType,
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–º–µ—à–∞–Ω–Ω—ã–π –Ω–∞–≥—É–ª"""

        proportions = config.get(
            "proportions", {"search_percentage": 70, "direct_percentage": 30}
        )
        search_percentage = proportions.get("search_percentage", 70)

        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –º–µ–∂–¥—É –ø–æ–∏—Å–∫–æ–≤—ã–º –∏ –ø—Ä—è–º—ã–º –Ω–∞–≥—É–ª–æ–º
        target_cookies = config.get("target_cookies", {"min": 50, "max": 100})
        total_target = random.randint(target_cookies["min"], target_cookies["max"])

        search_target = int(total_target * search_percentage / 100)
        direct_target = total_target - search_target

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        search_config = config.copy()
        search_config["target_cookies"] = {"min": search_target, "max": search_target}

        direct_config = config.copy()
        direct_config["target_cookies"] = {"min": direct_target, "max": direct_target}

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–∞ —Ç–∏–ø–∞ –Ω–∞–≥—É–ª–∞
        search_result = await self._execute_search_based_nurture(
            task, search_config, browser_manager, device_type
        )

        direct_result = await self._execute_direct_visits_nurture(
            task, direct_config, browser_manager, device_type
        )

        return {
            "success": True,
            "nurture_type": "mixed_nurture",
            "profile_id": search_result.get("profile_id"),
            "cookies_collected": search_result.get("cookies_collected", 0)
            + direct_result.get("cookies_collected", 0),
            "target_cookies": total_target,
            "search_cookies": search_result.get("cookies_collected", 0),
            "direct_cookies": direct_result.get("cookies_collected", 0),
            "sites_visited": search_result.get("sites_visited", 0)
            + direct_result.get("sites_visited", 0),
            "completed_at": datetime.now(timezone.utc).isoformat(),
        }

    async def _get_existing_profile(
        self, session: AsyncSession, profile_id: str
    ) -> Profile:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å"""
        result = await session.execute(select(Profile).where(Profile.id == profile_id))
        profile = result.scalar_one_or_none()
        if not profile:
            raise ValueError(f"Profile {profile_id} not found")
        return profile

    async def _get_search_queries(
        self, queries_source: Dict[str, Any], limit: int = 20
    ) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –î–ª—è –¥–µ–±–∞–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º ya.ru
        source_type = queries_source.get("type", "manual_input")

        if source_type == "manual_input":
            return queries_source.get(
                "queries",
                [
                    "–∫—É–ø–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
                    "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω",
                    "–¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã",
                    "–æ–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã",
                    "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
                    "–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏",
                    "–º–µ–±–µ–ª—å –¥–ª—è –¥–æ–º–∞",
                    "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
                    "–¥–µ—Ç—Å–∫–∏–µ –∏–≥—Ä—É—à–∫–∏",
                    "–∫–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏—è",
                    "–∫–Ω–∏–≥–∏ –æ–Ω–ª–∞–π–Ω",
                    "—Ç—É—Ä—ã –∏ –æ—Ç–¥—ã—Ö",
                ],
            )[:limit]

        return []

    async def _get_direct_sites(
        self, sites_source: Dict[str, Any], limit: int = 20
    ) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø—Ä—è–º—ã—Ö –∑–∞—Ö–æ–¥–æ–≤"""
        source_type = sites_source.get("type", "manual_input")

        if source_type == "manual_input":
            # –î–ª—è –¥–µ–±–∞–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º ya.ru –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥—Ä—É–≥–∏—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
            return sites_source.get(
                "sites",
                [
                    "https://ya.ru",
                    "https://www.ozon.ru",
                    "https://www.wildberries.ru",
                    "https://market.yandex.ru",
                    "https://www.dns-shop.ru",
                    "https://www.mvideo.ru",
                    "https://www.eldorado.ru",
                    "https://www.lamoda.ru",
                    "https://www.sportmaster.ru",
                    "https://www.citilink.ru",
                ],
            )[:limit]

        return []

    async def _perform_search_and_visits(
        self,
        page: Page,
        query: str,
        search_engine: str,
        session_config: Dict[str, Any],
    ) -> Dict[str, Any]:
        """–†–ï–ê–õ–¨–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
        try:
            logger.info(f"Performing search for query: {query} on {search_engine}")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º ya.ru –¥–ª—è –¥–µ–±–∞–≥–∞)
            await page.goto(
                "https://ya.ru", wait_until="domcontentloaded", timeout=30000
            )

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await page.wait_for_timeout(random.randint(2000, 4000))

            # –ò—â–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –≤–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
            search_input = page.locator(
                'input[name="text"], input[type="search"], input[placeholder*="–ù–∞–π—Ç–∏"], #text'
            )

            if await search_input.count() > 0:
                await search_input.first.fill(query)
                await page.wait_for_timeout(random.randint(500, 1500))

                # –ù–∞–∂–∏–º–∞–µ–º Enter –∏–ª–∏ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
                await page.keyboard.press("Enter")
                await page.wait_for_timeout(random.randint(3000, 6000))

                logger.info(f"Search performed for: {query}")
            else:
                logger.warning(f"Search input not found on {search_engine}")

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å–∫—Ä–æ–ª–ª–∏–Ω–≥
            for _ in range(random.randint(2, 5)):
                await page.mouse.wheel(0, random.randint(200, 800))
                await page.wait_for_timeout(random.randint(1000, 3000))

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É–∫–∏
            current_cookies = await page.context.cookies()

            return {
                "cookies_added": len(current_cookies),
                "sites_visited": ["ya.ru"],
                "search_performed": True,
                "query": query,
            }

        except Exception as e:
            logger.error(f"Error performing search: {e}")
            return {
                "cookies_added": 0,
                "sites_visited": [],
                "search_performed": False,
                "error": str(e),
            }

    async def _perform_direct_visit(
        self,
        page: Page,
        site: str,
        session_config: Dict[str, Any],
    ) -> Dict[str, Any]:
        """–†–ï–ê–õ–¨–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä—è–º–æ–≥–æ –∑–∞—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç"""
        try:
            logger.info(f"Performing direct visit to: {site}")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç
            await page.goto(site, wait_until="domcontentloaded", timeout=30000)

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await page.wait_for_timeout(random.randint(3000, 6000))

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –°–∫—Ä–æ–ª–ª–∏–Ω–≥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            for _ in range(random.randint(3, 7)):
                await page.mouse.wheel(0, random.randint(200, 600))
                await page.wait_for_timeout(random.randint(1000, 2500))

            # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
            for _ in range(random.randint(2, 4)):
                x = random.randint(100, 1000)
                y = random.randint(100, 600)
                await page.mouse.move(x, y)
                await page.wait_for_timeout(random.randint(500, 1500))

            # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            try:
                links = page.locator('a[href^="http"], a[href^="/"]')
                links_count = await links.count()

                if links_count > 0:
                    # –ö–ª–∏–∫–∞–µ–º –Ω–∞ 1-2 —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                    for _ in range(min(2, random.randint(1, 3))):
                        random_index = random.randint(0, min(links_count - 1, 10))
                        link = links.nth(random_index)

                        if await link.is_visible():
                            await link.click()
                            await page.wait_for_timeout(random.randint(2000, 4000))

                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
                            await page.go_back()
                            await page.wait_for_timeout(random.randint(1000, 3000))

            except Exception as e:
                logger.debug(f"Could not interact with links on {site}: {e}")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É–∫–∏
            current_cookies = await page.context.cookies()

            logger.info(
                f"Successfully visited {site}, collected {len(current_cookies)} cookies"
            )

            return {
                "cookies_added": len(current_cookies),
                "visit_successful": True,
                "site": site,
            }

        except Exception as e:
            logger.error(f"Error performing direct visit to {site}: {e}")
            return {
                "cookies_added": 0,
                "visit_successful": False,
                "site": site,
                "error": str(e),
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä worker'–∞
profile_nurture_worker = ProfileNurtureWorker()


async def start_profile_nurture_worker():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å worker –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    asyncio.create_task(profile_nurture_worker.start())


async def stop_profile_nurture_worker():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å worker"""
    await profile_nurture_worker.stop()
