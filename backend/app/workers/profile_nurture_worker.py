# backend/app/workers/profile_nurture_worker.py - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å VNC debug

import asyncio
import structlog
from typing import Dict, Any, Optional, List, Union
from datetime import datetime, timezone
import random
import os
import aiohttp
import re
from urllib.parse import urlparse

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update
from playwright.async_api import async_playwright, Browser, BrowserContext, Page
from sqlalchemy.orm import selectinload

from app.database import async_session_maker
from app.core.task_manager import TaskManager, TaskType, TaskStatus
from app.core.browser_manager import BrowserManager
from app.models import Task, Profile, DeviceType
from app.constants.strategies import ProfileNurtureType
from playwright.async_api import ViewportSize
from playwright.async_api import Cookie
import shutil
from pathlib import Path

logger = structlog.get_logger(__name__)


class ProfileNurtureWorker:
    """Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –Ω–∞–≥—É–ª–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π VNC debug"""

    def __init__(self):
        self.is_running = False
        self.worker_id = f"nurture_worker_{random.randint(1000, 9999)}"

    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å worker"""
        self.is_running = True
        logger.info("Profile nurture worker started", worker_id=self.worker_id)

        while self.is_running:
            try:
                await self._process_batch()
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∞–º–∏
            except Exception as e:
                logger.error(
                    "Error in worker main loop", worker_id=self.worker_id, error=str(e)
                )
                await asyncio.sleep(10)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å worker"""
        self.is_running = False
        logger.info("Profile nurture worker stopped", worker_id=self.worker_id)

    async def _process_batch(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞–∫–µ—Ç –∑–∞–¥–∞—á"""
        async with async_session_maker() as session:
            task_manager = TaskManager(session)

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            tasks = await task_manager.get_pending_nurture_tasks(limit=5)

            if not tasks:
                return

            logger.info(
                "Processing nurture tasks batch",
                worker_id=self.worker_id,
                tasks_count=len(tasks),
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(
                *[self._process_task(task) for task in tasks], return_exceptions=True
            )

    async def _process_task(self, task: Task):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É –Ω–∞–≥—É–ª–∞"""
        async with async_session_maker() as session:
            task_manager = TaskManager(session)
            browser_manager = BrowserManager(session)

            try:
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –∑–∞–ø—É—â–µ–Ω–Ω—É—é
                success = await task_manager.mark_task_started(
                    str(task.id), self.worker_id
                )
                if not success:
                    logger.warning(
                        "Failed to mark task as started", task_id=str(task.id)
                    )
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ debug —Ä–µ–∂–∏–º
                debug_enabled = task.parameters.get("debug_enabled", False)
                device_type = DeviceType(task.device_type)

                if debug_enabled:
                    logger.info(
                        "üîç Starting task in DEBUG mode",
                        task_id=str(task.id),
                        worker_id=self.worker_id,
                        device_type=device_type.value,
                    )
                    result = await self._execute_debug_task(
                        task, browser_manager, device_type
                    )
                else:
                    logger.info(
                        "Starting profile nurture task",
                        task_id=str(task.id),
                        worker_id=self.worker_id,
                        strategy_id=task.parameters.get("strategy_id"),
                    )
                    result = await self._execute_normal_task(
                        task, browser_manager, device_type
                    )

                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
                await task_manager.mark_task_completed(str(task.id), result)

                logger.info(
                    "Profile nurture task completed",
                    task_id=str(task.id),
                    worker_id=self.worker_id,
                    debug_mode=debug_enabled,
                    cookies_collected=result.get("cookies_collected", 0),
                )

            except Exception as e:
                logger.error(
                    "Profile nurture task failed",
                    task_id=str(task.id),
                    worker_id=self.worker_id,
                    error=str(e),
                )
                await task_manager.mark_task_failed(str(task.id), str(e))

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ _execute_debug_task —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º finally
    async def _execute_debug_task(
        self, task: Task, browser_manager: BrowserManager, device_type: DeviceType
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤ debug —Ä–µ–∂–∏–º–µ —Å VNC (—Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è)"""

        profile_temp_dir = None
        vnc_session = None
        exception_to_raise = None
        result = None

        try:
            logger.info("üîç Step 1: Creating VNC session")
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º enhanced vnc manager
            from app.core.enhanced_vnc_manager import enhanced_vnc_manager

            # –°–æ–∑–¥–∞–µ–º VNC —Å–µ—Å—Å–∏—é
            vnc_session_data = await enhanced_vnc_manager.create_debug_session(
                str(task.id), device_type
            )
            vnc_session = enhanced_vnc_manager.get_session_by_task(str(task.id))

            if not vnc_session:
                raise Exception("Failed to create VNC session")

            logger.info("üîç Step 2: Getting or creating profile")
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            if task.profile_id:
                profile = await self._get_existing_profile(
                    browser_manager.db, task.profile_id
                )
            else:
                profile = await self._create_profile_with_strategy_from_task(
                    browser_manager, device_type, task
                )

            logger.info(f"üîç Step 3: Profile ready, ID: {profile.id}")

            logger.info("üîç Step 4: Selecting proxy")
            # –í—ã–±–∏—Ä–∞–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            selected_proxy = await self._select_and_assign_proxy(profile)
            if selected_proxy:
                logger.info(
                    f"üåê Using proxy for debug task: {selected_proxy.get('host')}:{selected_proxy.get('port')}"
                )

            logger.info("üîç Step 5: Setting up VNC environment")
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è VNC
            os.environ["DISPLAY"] = f":{vnc_session.display_num}"

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ—Ñ–∏–ª—è
            profile_temp_dir = f"/var/www/topflight/data/profiles_temp/{profile.id}"
            Path(profile_temp_dir).mkdir(parents=True, exist_ok=True)

            logger.info(
                "üéØ VNC Debug session ready",
                task_id=str(task.id),
                vnc_port=vnc_session.vnc_port,
                display=f":{vnc_session.display_num}",
                connect_command=f"vncviewer localhost:{vnc_session.vnc_port}",
                profile_dir=profile_temp_dir,
            )

            logger.info("üîç Step 6: Preparing browser args")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –±—Ä–∞—É–∑–µ—Ä–∞
            browser_args = [
                "--no-sandbox",
                f"--user-agent={profile.user_agent}",
                f"--window-size={vnc_session.resolution.replace('x', ',')}",
                "--start-maximized",
                "--disable-web-security",
                "--allow-running-insecure-content",
                "--no-first-run",
                "--no-default-browser-check",
                "--disable-extensions-except",
                "--disable-component-extensions-with-background-pages=false",
                "--disable-features=TranslateUI",
                "--enable-features=NetworkService,NetworkServiceLogging",
                "--disable-features=VizDisplayCompositor",
                "--enable-automation",
            ]

            logger.info("üîç Step 7: Applying fingerprint to browser")
            enhanced_browser_args = await self._apply_fingerprint_to_browser(
                browser_args, profile
            )

            logger.info("üîç Step 8: Launching browser with Playwright")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å VNC –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è
            async with async_playwright() as p:
                browser = await p.chromium.launch(
                    headless=False,  # –í–ê–ñ–ù–û: –ù–ï headless –¥–ª—è VNC
                    slow_mo=1500,  # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
                    devtools=False,  # –í–∫–ª—é—á–∞–µ–º DevTools
                    args=enhanced_browser_args,
                )

                logger.info("üîç Step 9: Creating context with fingerprint")
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –° fingerprint –∏ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ Playwright
                context = await self._create_context_with_fingerprint(
                    browser, profile, vnc_session, selected_proxy
                )

                logger.info("üîç Step 10: Adding debug scripts")
                # –î–æ–±–∞–≤–ª—è–µ–º debug —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                await context.add_init_script(
                    f"""
                        console.log('üîç DEBUG MODE: Browser started for task {task.id}');
                        console.log('üé≠ Fingerprint info:', {{
                            userAgent: navigator.userAgent,
                            platform: navigator.platform,
                            hardwareConcurrency: navigator.hardwareConcurrency,
                            deviceMemory: navigator.deviceMemory || 'not supported',
                            languages: navigator.languages,
                            webdriver: navigator.webdriver
                        }});
                        console.log('üéØ Current URL:', window.location.href);

                        window.addEventListener('beforeunload', () => {{
                            console.log('üì§ Leaving:', window.location.href);
                        }});

                        window.addEventListener('load', () => {{
                            console.log('üì• Loaded:', window.location.href);
                            console.log('üç™ Cookies:', document.cookie.split(';').length);
                        }});

                        window.DEBUG_TASK_ID = '{task.id}';
                    """
                )

                logger.info("üîç Step 11: Creating page")
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page = await context.new_page()

                try:
                    logger.info("üîç Step 12: Executing debug nurture")
                    # –í—ã–ø–æ–ª–Ω—è–µ–º debug –Ω–∞–≥—É–ª
                    result = await self._execute_debug_nurture(
                        task, page, context, device_type
                    )

                    logger.info("üîç Step 13: Getting final cookies")
                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–∫–æ–≤
                    final_cookies = await context.cookies()
                    result["cookies_collected"] = len(final_cookies)
                    result["debug_mode"] = True
                    result["vnc_session"] = {
                        "vnc_port": vnc_session.vnc_port,
                        "display_num": vnc_session.display_num,
                        "resolution": vnc_session.resolution,
                    }

                    logger.info("üîç Step 14: Saving cookies to profile")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    await self._save_cookies_to_profile(profile, final_cookies)

                    logger.info(
                        "üîç Debug session completed. Browser will stay open for inspection."
                    )
                    logger.info(
                        f"üéØ Connect with: vncviewer localhost:{vnc_session.vnc_port}"
                    )

                    # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
                    await asyncio.sleep(30)

                finally:
                    logger.info("üîç Step 15: Closing context and browser")
                    await context.close()
                    await browser.close()

        except Exception as e:
            logger.error(f"‚ùå Debug task failed at step: {e}")
            exception_to_raise = e

        finally:
            logger.info("üîç Step 16: Cleanup")
            # Cleanup –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–°–ï–ì–î–ê

            # –û—á–∏—â–∞–µ–º VNC —Å–µ—Å—Å–∏—é
            if vnc_session:
                try:
                    from app.core.enhanced_vnc_manager import enhanced_vnc_manager

                    await enhanced_vnc_manager.stop_debug_session(str(task.id))
                    logger.info(f"üßπ Stopped VNC session for task {task.id}")
                except Exception as cleanup_error:
                    logger.warning(f"‚ö†Ô∏è Failed to stop VNC session: {cleanup_error}")

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ—Ñ–∏–ª—è
            if profile_temp_dir and Path(profile_temp_dir).exists():
                try:
                    shutil.rmtree(profile_temp_dir)
                    logger.info(
                        f"üóëÔ∏è Cleaned up profile temp directory: {profile_temp_dir}"
                    )
                except Exception as cleanup_error:
                    logger.warning(
                        f"‚ö†Ô∏è Failed to clean up profile directory {profile_temp_dir}: {cleanup_error}"
                    )

        # –ü–æ—Å–ª–µ finally - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–ª–∞—Ç—å
        if exception_to_raise:
            raise exception_to_raise

        return result

    async def _create_profile_with_strategy_from_task(
        self, browser_manager: BrowserManager, device_type: DeviceType, task: Task
    ) -> Profile:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –∏–∑ –∑–∞–¥–∞—á–∏"""

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        profile = await browser_manager.create_profile(device_type=device_type)

        # –ï—Å–ª–∏ –≤ –∑–∞–¥–∞—á–µ –µ—Å—Ç—å strategy_id - –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ–µ –ø—Ä–æ—Ñ–∏–ª—é
        strategy_id = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º strategy_id –≤ –ø–æ–ª–µ task.strategy_id (–Ω–æ–≤–æ–µ –ø–æ–ª–µ)
        if hasattr(task, "strategy_id") and task.strategy_id:
            strategy_id = str(task.strategy_id)
            logger.info(f"üìã Using strategy_id from task.strategy_id: {strategy_id}")

        # Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–¥–∞—á–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        elif task.parameters and task.parameters.get("strategy_id"):
            strategy_id = task.parameters.get("strategy_id")
            logger.info(f"üìã Using strategy_id from task.parameters: {strategy_id}")

        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ—Ñ–∏–ª—é –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞
        if strategy_id:
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –∏–∑ browser_manager
                # –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π async_session_maker()
                session = browser_manager.db

                await session.execute(
                    update(Profile)
                    .where(Profile.id == profile.id)
                    .values(nurture_strategy_id=strategy_id)
                )
                await session.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏
                profile.nurture_strategy_id = strategy_id

                logger.info(
                    f"üìã Assigned strategy to profile",
                    profile_id=str(profile.id),
                    strategy_id=strategy_id,
                    task_id=str(task.id),
                )

            except Exception as e:
                logger.error(f"‚ùå Failed to assign strategy to profile: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                await session.rollback()
        else:
            logger.debug(
                f"No strategy_id found in task {task.id}, profile created without strategy"
            )

        return profile

    async def _execute_debug_nurture(
        self, task: Task, page: Page, context: BrowserContext, device_type: DeviceType
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–≥—É–ª –≤ debug —Ä–µ–∂–∏–º–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º VNC"""

        # –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è –¥–µ–±–∞–≥–∞ (–≤–∫–ª—é—á–∞—è ya.ru)
        debug_sites = [
            "https://2ip.ru",
            "https://yandex.ru",
            # "https://ya.ru",
            # "https://www.ozon.ru",
            # "https://market.yandex.ru",
            # "https://habr.com",
            # "https://www.kinopoisk.ru",
        ]

        logger.info(f"üöÄ Starting debug visits to {len(debug_sites)} sites")

        sites_visited = []
        total_interactions = 0

        for i, site in enumerate(debug_sites):
            try:
                logger.info(f"üåê [{i+1}/{len(debug_sites)}] Visiting: {site}")

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç
                await page.goto(site, wait_until="domcontentloaded", timeout=30000)

                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
                await page.wait_for_timeout(3000)

                # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
                await page.evaluate(
                    f"""
                    console.log('üéØ DEBUG: Page loaded - {site}');
                    console.log('üìÑ Title:', document.title);
                    console.log('üç™ Cookies count:', document.cookie.split(';').filter(c => c.trim()).length);
                    console.log('üîó Links count:', document.querySelectorAll('a').length);
                """
                )

                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                interactions = await self._perform_debug_interactions(page, site)
                total_interactions += interactions

                sites_visited.append(site)

                # –ü–∞—É–∑–∞ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
                await page.wait_for_timeout(5000)

                logger.info(
                    f"‚úÖ Completed visit to {site} with {interactions} interactions"
                )

            except Exception as e:
                logger.error(f"‚ùå Failed to visit {site}: {e}")

        logger.info(
            f"üéâ Debug nurture completed. Visited {len(sites_visited)} sites with {total_interactions} total interactions"
        )

        return {
            "success": True,
            "nurture_type": "debug_visits",
            "sites_visited": len(sites_visited),
            "sites_list": sites_visited,
            "total_interactions": total_interactions,
            "completed_at": datetime.now(timezone.utc).isoformat(),
        }

    async def _perform_debug_interactions(self, page: Page, site: str) -> int:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è debug"""
        interactions = 0

        try:
            # –°–∫—Ä–æ–ª–ª–∏–Ω–≥
            for scroll in range(3):
                await page.mouse.wheel(0, 500)
                await page.wait_for_timeout(1000)
                interactions += 1

            # –î–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
            for move in range(2):
                x = random.randint(100, 800)
                y = random.randint(100, 600)
                await page.mouse.move(x, y)
                await page.wait_for_timeout(500)
                interactions += 1

            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —Å—Å—ã–ª–∫–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            try:
                links = await page.query_selector_all("a[href]")
                if links and len(links) > 0:
                    # –í—ã–±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Å—ã–ª–∫—É
                    link = random.choice(links[:5])  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å—Å—ã–ª–æ–∫

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤–∏–¥–∏–º–∞ –ª–∏ —Å—Å—ã–ª–∫–∞
                    is_visible = await link.is_visible()
                    if is_visible:
                        href = await link.get_attribute("href")
                        if href and not href.startswith("javascript:"):
                            await page.evaluate(
                                f"""
                                console.log('üñ±Ô∏è DEBUG: Clicking link:', '{href}');
                            """
                            )

                            await link.click()
                            await page.wait_for_timeout(2000)

                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
                            await page.go_back()
                            await page.wait_for_timeout(1000)
                            interactions += 1

            except Exception as e:
                logger.debug(f"Could not interact with links on {site}: {e}")

            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ñ–æ—Ä–º–∞–º–∏ –ø–æ–∏—Å–∫–∞
            try:
                # search_inputs = await page.query_selector_all(
                #     'input[type="search"], input[name*="search"], input[placeholder*="–ø–æ–∏—Å–∫"]'
                # )

                search_input = page.locator(
                    'input[type="search"], input[name*="search"], input[placeholder*="–ø–æ–∏—Å–∫"]'
                ).first

                await search_input.fill("—Ç–µ—Å—Ç")
                await page.wait_for_timeout(1000)
                # –£ Locator –µ—Å—Ç—å –º–µ—Ç–æ–¥ clear()
                await search_input.clear()
                interactions += 1
                await page.evaluate(
                    """
                    console.log('üîç DEBUG: Interacted with search input');
                """
                )

                # if search_inputs:
                #     search_input = search_inputs[0]
                #     await search_input.fill("—Ç–µ—Å—Ç")
                #     await page.wait_for_timeout(1000)
                #     # await search_input.clear()
                #     await search_input.fill("")
                #     interactions += 1
                #
                #     await page.evaluate(
                #         """
                #         console.log('üîç DEBUG: Interacted with search input');
                #     """
                #     )

            except Exception as e:
                logger.debug(f"Could not interact with search on {site}: {e}")

        except Exception as e:
            logger.error(f"Error performing interactions on {site}: {e}")

        return interactions

    async def _execute_normal_task(
        self, task: Task, browser_manager: BrowserManager, device_type: DeviceType
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ VNC)"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏
        strategy_config = task.parameters.get("strategy_config", {})
        nurture_type = strategy_config.get("nurture_type", "search_based")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–≥—É–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if nurture_type == "search_based":
            return await self._execute_search_based_nurture(
                task, strategy_config, browser_manager, device_type
            )
        elif nurture_type == "direct_visits":
            return await self._execute_direct_visits_nurture(
                task, strategy_config, browser_manager, device_type
            )
        elif nurture_type == "mixed_nurture":
            return await self._execute_mixed_nurture(
                task, strategy_config, browser_manager, device_type
            )
        else:
            raise ValueError(f"Unsupported nurture type: {nurture_type}")

    async def _execute_search_based_nurture(
        self,
        task: Task,
        config: Dict[str, Any],
        browser_manager: BrowserManager,
        device_type: DeviceType,
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –Ω–∞–≥—É–ª —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è"""

        profile_temp_dir = None
        exception_to_raise = None
        result = None

        try:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            if task.profile_id:
                profile = await self._get_existing_profile(
                    browser_manager.db, task.profile_id
                )
            else:
                profile = await browser_manager.create_profile(device_type=device_type)

            # –í—ã–±–∏—Ä–∞–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            selected_proxy = await self._select_and_assign_proxy(profile)
            if selected_proxy:
                logger.info(
                    f"üåê Using proxy for nurture task: {selected_proxy.get('host')}:{selected_proxy.get('port')}"
                )

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ—Ñ–∏–ª—è
            profile_temp_dir = f"/var/www/topflight/data/profiles_temp/{profile.id}"
            Path(profile_temp_dir).mkdir(parents=True, exist_ok=True)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –±—Ä–∞—É–∑–µ—Ä–∞
            browser_args = [
                "--no-sandbox",
                "--disable-blink-features=AutomationControlled",
                f"--user-agent={profile.user_agent}",
                "--window-size=1920,1080",
                "--disable-web-security",
                "--allow-running-insecure-content",
                "--no-first-run",
                "--no-default-browser-check",
                "--disable-features=TranslateUI",
                # f"--user-data-dir={profile_temp_dir}",
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
            if selected_proxy:
                proxy_args = self._build_proxy_args(selected_proxy)
                browser_args.extend(proxy_args)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è
            async with async_playwright() as p:
                browser = await p.chromium.launch(
                    headless=True,  # Headless –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
                    args=browser_args,
                )

                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–≥—É–ª–∞
                    target_cookies = config.get(
                        "target_cookies", {"min": 50, "max": 100}
                    )
                    search_engines = config.get("search_engines", ["yandex.ru"])
                    queries_source = config.get("queries_source", {})
                    session_config = config.get("session_config", {})

                    # –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–∫–æ–≤
                    target_count = random.randint(
                        target_cookies["min"], target_cookies["max"]
                    )

                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
                    queries = await self._get_search_queries(queries_source, limit=20)

                    if not queries:
                        raise ValueError("No search queries available for nurturing")

                    cookies_collected = 0
                    sites_visited = []

                    # –ü–æ–ª—É—á–∞–µ–º viewport –∏–∑ fingerprint –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    viewport_width = 1920
                    viewport_height = 1080

                    if (
                        hasattr(profile, "fingerprint_data")
                        and profile.fingerprint_data
                    ):
                        if profile.fingerprint_data.viewport_size:
                            viewport_parts = (
                                profile.fingerprint_data.viewport_size.split("x")
                            )
                            if len(viewport_parts) == 2:
                                viewport_width = int(viewport_parts[0])
                                viewport_height = int(viewport_parts[1])

                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º cookies
                    context = await browser.new_context(
                        user_agent=profile.user_agent,
                        viewport=ViewportSize(
                            width=viewport_width, height=viewport_height
                        ),
                        storage_state=(
                            {
                                "cookies": profile.cookies if profile.cookies else [],
                                "origins": [],
                            }
                            if profile.cookies
                            else None
                        ),
                    )

                    page = await context.new_page()

                    for i, query in enumerate(queries[:target_count]):
                        if cookies_collected >= target_count:
                            break

                        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
                        search_engine = random.choice(search_engines)

                        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã
                        search_result = await self._perform_search_and_visits(
                            page, query, search_engine, session_config
                        )

                        cookies_collected += search_result.get("cookies_added", 0)
                        sites_visited.extend(search_result.get("sites_visited", []))

                        # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏
                        delay = random.uniform(3, 8)
                        await asyncio.sleep(delay)

                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    cookies = await context.cookies()

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –≤ –ø—Ä–æ—Ñ–∏–ª—å
                    await self._save_cookies_to_profile(profile, cookies)

                    await context.close()

                    result = {
                        "success": True,
                        "nurture_type": "search_based",
                        "profile_id": str(profile.id),
                        "cookies_collected": len(cookies),
                        "target_cookies": target_count,
                        "sites_visited": len(sites_visited),
                        "sites_list": sites_visited,
                        "queries_used": len(queries),
                        "completed_at": datetime.utcnow().isoformat(),
                    }

                finally:
                    await browser.close()

        except Exception as e:
            logger.error(f"‚ùå Search based nurture failed: {e}")
            exception_to_raise = e

        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ—Ñ–∏–ª—è
            if profile_temp_dir and Path(profile_temp_dir).exists():
                try:
                    shutil.rmtree(profile_temp_dir)
                    logger.info(
                        f"üóëÔ∏è Cleaned up profile temp directory: {profile_temp_dir}"
                    )
                except Exception as cleanup_error:
                    logger.warning(
                        f"‚ö†Ô∏è Failed to clean up profile directory {profile_temp_dir}: {cleanup_error}"
                    )

        # –ü–æ—Å–ª–µ finally - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–ª–∞—Ç—å
        if exception_to_raise:
            raise exception_to_raise

        return result

    async def _execute_direct_visits_nurture(
        self,
        task: Task,
        config: Dict[str, Any],
        browser_manager: BrowserManager,
        device_type: DeviceType,
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–≥—É–ª –ø—Ä—è–º—ã–º–∏ –∑–∞—Ö–æ–¥–∞–º–∏"""

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        if task.profile_id:
            profile = await self._get_existing_profile(
                browser_manager.db, task.profile_id
            )
        else:
            profile = await browser_manager.create_profile(device_type=device_type)

        async with async_playwright() as p:
            browser = await browser_manager.launch_browser(p, profile)

            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                target_cookies = config.get("target_cookies", {"min": 50, "max": 100})
                direct_sites_source = config.get("direct_sites_source", {})
                session_config = config.get("session_config", {})

                target_count = random.randint(
                    target_cookies["min"], target_cookies["max"]
                )

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø—Ä—è–º—ã—Ö –∑–∞—Ö–æ–¥–æ–≤
                sites = await self._get_direct_sites(
                    direct_sites_source, limit=target_count
                )

                if not sites:
                    raise ValueError("No direct sites available for nurturing")

                cookies_collected = 0
                sites_visited = []

                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞
                context = await browser.new_context(
                    user_agent=profile.user_agent,
                    viewport={"width": 1920, "height": 1080},
                )

                page = await context.new_page()

                for site in sites[:target_count]:
                    if cookies_collected >= target_count:
                        break

                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—è–º–æ–π –∑–∞—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
                    visit_result = await self._perform_direct_visit(
                        page, site, session_config
                    )

                    cookies_collected += visit_result.get("cookies_added", 0)
                    sites_visited.append(site)

                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞—Ö–æ–¥–∞–º–∏
                    delay = random.uniform(2, 6)
                    await asyncio.sleep(delay)

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                cookies = await context.cookies()

                await context.close()

                return {
                    "success": True,
                    "nurture_type": "direct_visits",
                    "profile_id": str(profile.id),
                    "cookies_collected": len(cookies),
                    "target_cookies": target_count,
                    "sites_visited": len(sites_visited),
                    "sites_list": sites_visited,
                    "completed_at": datetime.now(timezone.utc).isoformat(),
                }

            finally:
                await browser.close()

    async def _execute_mixed_nurture(
        self,
        task: Task,
        config: Dict[str, Any],
        browser_manager: BrowserManager,
        device_type: DeviceType,
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–º–µ—à–∞–Ω–Ω—ã–π –Ω–∞–≥—É–ª"""

        proportions = config.get(
            "proportions", {"search_percentage": 70, "direct_percentage": 30}
        )
        search_percentage = proportions.get("search_percentage", 70)

        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –º–µ–∂–¥—É –ø–æ–∏—Å–∫–æ–≤—ã–º –∏ –ø—Ä—è–º—ã–º –Ω–∞–≥—É–ª–æ–º
        target_cookies = config.get("target_cookies", {"min": 50, "max": 100})
        total_target = random.randint(target_cookies["min"], target_cookies["max"])

        search_target = int(total_target * search_percentage / 100)
        direct_target = total_target - search_target

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        search_config = config.copy()
        search_config["target_cookies"] = {"min": search_target, "max": search_target}

        direct_config = config.copy()
        direct_config["target_cookies"] = {"min": direct_target, "max": direct_target}

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–∞ —Ç–∏–ø–∞ –Ω–∞–≥—É–ª–∞
        search_result = await self._execute_search_based_nurture(
            task, search_config, browser_manager, device_type
        )

        direct_result = await self._execute_direct_visits_nurture(
            task, direct_config, browser_manager, device_type
        )

        return {
            "success": True,
            "nurture_type": "mixed_nurture",
            "profile_id": search_result.get("profile_id"),
            "cookies_collected": search_result.get("cookies_collected", 0)
            + direct_result.get("cookies_collected", 0),
            "target_cookies": total_target,
            "search_cookies": search_result.get("cookies_collected", 0),
            "direct_cookies": direct_result.get("cookies_collected", 0),
            "sites_visited": search_result.get("sites_visited", 0)
            + direct_result.get("sites_visited", 0),
            "completed_at": datetime.now(timezone.utc).isoformat(),
        }

    async def _get_existing_profile(
        self, session: AsyncSession, profile_id: str
    ) -> Profile:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã
            result = await session.execute(
                select(Profile).where(Profile.id == profile_id)
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω—ã fingerprint_data –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–≤—è–∑–∏
                # .options(selectinload(Profile.fingerprint_data))
            )
            profile = result.scalar_one_or_none()

            if not profile:
                raise ValueError(f"Profile {profile_id} not found")

            logger.info(
                f"üìã Retrieved existing profile",
                profile_id=str(profile.id),
                device_type=(
                    profile.device_type.value if profile.device_type else "unknown"
                ),
            )

            return profile

        except Exception as e:
            logger.error(f"‚ùå Failed to get existing profile {profile_id}: {e}")
            raise

    async def _get_search_queries(
        self, queries_source: Dict[str, Any], limit: int = 20
    ) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –î–ª—è –¥–µ–±–∞–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º ya.ru
        source_type = queries_source.get("type", "manual_input")

        if source_type == "manual_input":
            return queries_source.get(
                "queries",
                [
                    "–∫—É–ø–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
                    "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω",
                    "–¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã",
                    "–æ–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã",
                    "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
                    "–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏",
                    "–º–µ–±–µ–ª—å –¥–ª—è –¥–æ–º–∞",
                    "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
                    "–¥–µ—Ç—Å–∫–∏–µ –∏–≥—Ä—É—à–∫–∏",
                    "–∫–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏—è",
                    "–∫–Ω–∏–≥–∏ –æ–Ω–ª–∞–π–Ω",
                    "—Ç—É—Ä—ã –∏ –æ—Ç–¥—ã—Ö",
                ],
            )[:limit]

        return []

    async def _get_direct_sites(
        self, sites_source: Dict[str, Any], limit: int = 20
    ) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø—Ä—è–º—ã—Ö –∑–∞—Ö–æ–¥–æ–≤"""
        source_type = sites_source.get("type", "manual_input")

        if source_type == "manual_input":
            # –î–ª—è –¥–µ–±–∞–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º ya.ru –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥—Ä—É–≥–∏—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
            return sites_source.get(
                "sites",
                [
                    "https://2ip.ru",
                    # "https://ya.ru",
                    # "https://www.ozon.ru",
                    # "https://www.wildberries.ru",
                    # "https://market.yandex.ru",
                    # "https://www.dns-shop.ru",
                    # "https://www.mvideo.ru",
                    # "https://www.eldorado.ru",
                    # "https://www.lamoda.ru",
                    # "https://www.sportmaster.ru",
                    # "https://www.citilink.ru",
                ],
            )[:limit]

        return []

    async def _perform_search_and_visits(
        self,
        page: Page,
        query: str,
        search_engine: str,
        session_config: Dict[str, Any],
    ) -> Dict[str, Any]:
        """–†–ï–ê–õ–¨–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
        try:
            logger.info(f"Performing search for query: {query} on {search_engine}")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º ya.ru –¥–ª—è –¥–µ–±–∞–≥–∞)
            await page.goto(
                "https://ya.ru", wait_until="domcontentloaded", timeout=30000
            )

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await page.wait_for_timeout(random.randint(2000, 4000))

            # –ò—â–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –≤–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
            search_input = page.locator(
                'input[name="text"], input[type="search"], input[placeholder*="–ù–∞–π—Ç–∏"], #text'
            )

            if await search_input.count() > 0:
                await search_input.first.fill(query)
                await page.wait_for_timeout(random.randint(500, 1500))

                # –ù–∞–∂–∏–º–∞–µ–º Enter –∏–ª–∏ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
                await page.keyboard.press("Enter")
                await page.wait_for_timeout(random.randint(3000, 6000))

                logger.info(f"Search performed for: {query}")
            else:
                logger.warning(f"Search input not found on {search_engine}")

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å–∫—Ä–æ–ª–ª–∏–Ω–≥
            for _ in range(random.randint(2, 5)):
                await page.mouse.wheel(0, random.randint(200, 800))
                await page.wait_for_timeout(random.randint(1000, 3000))

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É–∫–∏
            current_cookies = await page.context.cookies()

            return {
                "cookies_added": len(current_cookies),
                "sites_visited": ["ya.ru"],
                "search_performed": True,
                "query": query,
            }

        except Exception as e:
            logger.error(f"Error performing search: {e}")
            return {
                "cookies_added": 0,
                "sites_visited": [],
                "search_performed": False,
                "error": str(e),
            }

    async def _perform_direct_visit(
        self,
        page: Page,
        site: str,
        session_config: Dict[str, Any],
    ) -> Dict[str, Any]:
        """–†–ï–ê–õ–¨–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä—è–º–æ–≥–æ –∑–∞—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç"""
        try:
            logger.info(f"Performing direct visit to: {site}")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç
            await page.goto(site, wait_until="domcontentloaded", timeout=30000)

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await page.wait_for_timeout(random.randint(3000, 6000))

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –°–∫—Ä–æ–ª–ª–∏–Ω–≥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            for _ in range(random.randint(3, 7)):
                await page.mouse.wheel(0, random.randint(200, 600))
                await page.wait_for_timeout(random.randint(1000, 2500))

            # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
            for _ in range(random.randint(2, 4)):
                x = random.randint(100, 1000)
                y = random.randint(100, 600)
                await page.mouse.move(x, y)
                await page.wait_for_timeout(random.randint(500, 1500))

            # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            try:
                links = page.locator('a[href^="http"], a[href^="/"]')
                links_count = await links.count()

                if links_count > 0:
                    # –ö–ª–∏–∫–∞–µ–º –Ω–∞ 1-2 —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                    for _ in range(min(2, random.randint(1, 3))):
                        random_index = random.randint(0, min(links_count - 1, 10))
                        link = links.nth(random_index)

                        if await link.is_visible():
                            await link.click()
                            await page.wait_for_timeout(random.randint(2000, 4000))

                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
                            await page.go_back()
                            await page.wait_for_timeout(random.randint(1000, 3000))

            except Exception as e:
                logger.debug(f"Could not interact with links on {site}: {e}")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É–∫–∏
            current_cookies = await page.context.cookies()

            logger.info(
                f"Successfully visited {site}, collected {len(current_cookies)} cookies"
            )

            return {
                "cookies_added": len(current_cookies),
                "visit_successful": True,
                "site": site,
            }

        except Exception as e:
            logger.error(f"Error performing direct visit to {site}: {e}")
            return {
                "cookies_added": 0,
                "visit_successful": False,
                "site": site,
                "error": str(e),
            }

    async def _save_cookies_to_profile(
        self, profile: Profile, cookies: List[Cookie]
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å cookies –≤ –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with async_session_maker() as session:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º cookies –∏–∑ Playwright Cookie objects –≤ dict
                cookies_json = []
                for cookie in cookies:
                    # Cookie –æ–±—ä–µ–∫—Ç —É–∂–µ –∏–º–µ–µ—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
                    cookie_data = {
                        "name": cookie["name"],
                        "value": cookie["value"],
                        "domain": cookie["domain"],
                        "path": cookie.get("path", "/"),
                        "expires": cookie.get("expires", -1),
                        "httpOnly": cookie.get("httpOnly", False),
                        "secure": cookie.get("secure", False),
                        "sameSite": cookie.get("sameSite", "Lax"),
                    }
                    cookies_json.append(cookie_data)

                # –ü–†–ê–í–ò–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º datetime.utcnow() –∫–∞–∫ –≤ TimestampMixin
                # –≠—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç naive datetime, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è TIMESTAMP WITHOUT TIME ZONE
                now_utc_naive = datetime.utcnow()

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤—ã–º–∏ cookies
                await session.execute(
                    update(Profile)
                    .where(Profile.id == profile.id)
                    .values(
                        cookies=cookies_json,
                        last_used=now_utc_naive,  # naive datetime –∫–∞–∫ –≤ –±–∞–∑–µ
                        warmup_sites_visited=len(cookies_json),
                        status="warmed_up" if len(cookies_json) > 10 else "warming",
                        # updated_at –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ TimestampMixin
                    )
                )
                await session.commit()

                logger.info(
                    f"üíæ Saved {len(cookies_json)} cookies to profile",
                    profile_id=str(profile.id),
                    cookies_count=len(cookies_json),
                )

        except Exception as e:
            logger.error(f"‚ùå Failed to save cookies to profile: {e}")

    async def _select_and_assign_proxy(
        self, profile: Profile
    ) -> Optional[Dict[str, Any]]:
        """–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–≥–æ"""
        try:
            # –í–ê–†–ò–ê–ù–¢ 1: –ü—Ä–æ–∫—Å–∏ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
            if profile.nurture_strategy_id:
                selected_proxy = await self._get_proxy_from_strategy(
                    profile.nurture_strategy_id
                )
                if selected_proxy:
                    await self._save_proxy_to_profile_session(profile, selected_proxy)
                    logger.info(
                        f"üåê Assigned proxy from strategy to profile",
                        profile_id=str(profile.id),
                        strategy_id=str(profile.nurture_strategy_id),
                        proxy_host=selected_proxy.get("host"),
                        proxy_type=selected_proxy.get("type", "http"),
                    )
                    return selected_proxy

            # –í–ê–†–ò–ê–ù–¢ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø—Ä–æ–∫—Å–∏ –∏–∑ profile.proxy_config
            if profile.proxy_config:
                logger.info(
                    f"üåê Using existing proxy config from profile",
                    profile_id=str(profile.id),
                    proxy_host=profile.proxy_config.get("host"),
                    proxy_type=profile.proxy_config.get("type", "http"),
                )
                return profile.proxy_config

            # –í–ê–†–ò–ê–ù–¢ 3: –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –¥–µ–±–∞–≥–∞ (–µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
            if not profile.nurture_strategy_id:
                logger.debug(
                    f"Profile {profile.id} has no nurture strategy, creating test proxy for debug"
                )
                test_proxy = {
                    "type": "http",
                    "host": "127.0.0.1",
                    "port": 8080,
                    "username": "test",
                    "password": "test123",
                }
                await self._save_proxy_to_profile_session(profile, test_proxy)
                logger.info(f"üß™ Assigned test proxy for profile without strategy")
                return test_proxy

            logger.debug(f"No proxy available for profile {profile.id}")
            return None

        except Exception as e:
            logger.error(f"‚ùå Failed to select proxy for profile {profile.id}: {e}")
            return None

    async def _get_proxy_from_strategy(
        self, strategy_id: str
    ) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            async with async_session_maker() as session:
                from app.models.strategies import UserStrategy
                from app.models.strategy_proxy import StrategyProxySource

                result = await session.execute(
                    select(UserStrategy)
                    .options(selectinload(UserStrategy.proxy_sources))
                    .where(UserStrategy.id == strategy_id)
                )
                strategy = result.scalar_one_or_none()

                if not strategy or not strategy.proxy_sources:
                    logger.debug(f"Strategy {strategy_id} has no proxy sources")
                    return None

                # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–æ–∫—Å–∏
                active_sources = [
                    source for source in strategy.proxy_sources if source.is_active
                ]
                if not active_sources:
                    logger.debug(f"Strategy {strategy_id} has no active proxy sources")
                    return None

                # –†–∞–∑–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ
                static_sources = [
                    s
                    for s in active_sources
                    if s.source_type in ["manual_list", "file_upload"]
                ]
                dynamic_sources = [
                    s
                    for s in active_sources
                    if s.source_type in ["url_import", "google_sheets", "google_docs"]
                ]

                selected_proxy = None

                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ —Ç–∏–ø–∞ - –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ
                if static_sources and dynamic_sources:
                    use_static = random.choice([True, False])
                    if use_static:
                        selected_proxy = await self._get_random_static_proxy(
                            static_sources
                        )
                    else:
                        selected_proxy = await self._get_random_dynamic_proxy(
                            dynamic_sources
                        )
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ
                elif static_sources:
                    selected_proxy = await self._get_random_static_proxy(static_sources)
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ
                elif dynamic_sources:
                    selected_proxy = await self._get_random_dynamic_proxy(
                        dynamic_sources
                    )

                return selected_proxy

        except Exception as e:
            logger.error(f"‚ùå Failed to get proxy from strategy {strategy_id}: {e}")
            return None

    async def _save_proxy_to_profile_session(
        self, profile: Profile, proxy_config: Dict[str, Any]
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å (–≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏)"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ü–ï–†–ï–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            logger.error(f"üîç BEFORE SAVE - proxy config: {proxy_config}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –Ω–µ–∑–∞–≤–∏—Å–∏–º—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ–∫—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
            # –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ç.–∫. –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å—å—é –ø—Ä–æ—Ñ–∏–ª—è
            async with async_session_maker() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∫–æ–ø–∏—é –ø—Ä–æ—Ñ–∏–ª—è –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
                fresh_profile_result = await session.execute(
                    select(Profile).where(Profile.id == profile.id)
                )
                fresh_profile = fresh_profile_result.scalar_one_or_none()

                if not fresh_profile:
                    logger.error(f"‚ùå Profile {profile.id} not found for proxy update")
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                fresh_profile.proxy_config = proxy_config

                await session.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–∞–º—è—Ç–∏ (–∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç)
                profile.proxy_config = proxy_config

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
                check_result = await session.execute(
                    select(Profile.proxy_config).where(Profile.id == profile.id)
                )
                saved_config = check_result.scalar_one()
                logger.error(f"üîç AFTER SAVE - saved config: {saved_config}")

                logger.info(
                    f"üíæ Saved proxy config to profile",
                    profile_id=str(profile.id),
                    proxy_host=proxy_config.get("host"),
                    proxy_port=proxy_config.get("port"),
                    proxy_type=proxy_config.get("type"),
                )

        except Exception as e:
            logger.error(f"‚ùå Failed to save proxy to profile: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é

    async def _get_random_static_proxy(
        self, static_sources: List
    ) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            all_proxies = []

            for source in static_sources:
                if source.proxy_data:
                    logger.info(
                        f"üîç Processing proxy source: {source.proxy_data[:100]}..."
                    )
                    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    proxies = self._parse_proxy_list(source.proxy_data)
                    all_proxies.extend(proxies)

            if not all_proxies:
                logger.warning("No valid proxies found in static sources")
                return None

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–æ–∫—Å–∏
            selected_proxy = random.choice(all_proxies)
            logger.info(f"üéØ Selected proxy: {selected_proxy}")
            return selected_proxy

        except Exception as e:
            logger.error(f"‚ùå Failed to get static proxy: {e}")
            return None

    async def _get_random_dynamic_proxy(
        self, dynamic_sources: List
    ) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–æ–∫—Å–∏ –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫
            source = random.choice(dynamic_sources)

            if source.source_type == "url_import":
                return await self._fetch_proxy_from_url(source.source_url)
            elif source.source_type == "google_sheets":
                return await self._fetch_proxy_from_google_sheets(source.source_url)
            elif source.source_type == "google_docs":
                return await self._fetch_proxy_from_google_docs(source.source_url)

            return None

        except Exception as e:
            logger.error(f"‚ùå Failed to get dynamic proxy: {e}")
            return None

    async def _fetch_proxy_from_url(self, url: str) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–∑ URL"""
        try:
            async with aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=30)
            ) as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        text = await response.text()
                        proxies = self._parse_proxy_list(text)
                        if proxies:
                            return random.choice(proxies)
                    else:
                        logger.warning(
                            f"Failed to fetch proxy from URL {url}: HTTP {response.status}"
                        )

            return None

        except Exception as e:
            logger.error(f"‚ùå Failed to fetch proxy from URL {url}: {e}")
            return None

    async def _fetch_proxy_from_google_sheets(
        self, url: str
    ) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–∑ Google Sheets"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º URL –≤ CSV export URL
            if "/edit" in url or "/view" in url:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã
                sheet_id_match = re.search(r"/spreadsheets/d/([a-zA-Z0-9-_]+)", url)
                if sheet_id_match:
                    sheet_id = sheet_id_match.group(1)
                    csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv"

                    async with aiohttp.ClientSession(
                        timeout=aiohttp.ClientTimeout(total=30)
                    ) as session:
                        async with session.get(csv_url) as response:
                            if response.status == 200:
                                text = await response.text()
                                proxies = self._parse_proxy_list(text)
                                if proxies:
                                    return random.choice(proxies)

            return None

        except Exception as e:
            logger.error(f"‚ùå Failed to fetch proxy from Google Sheets {url}: {e}")
            return None

    async def _fetch_proxy_from_google_docs(self, url: str) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–∑ Google Docs"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º URL –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π export URL
            if "/edit" in url or "/view" in url:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
                doc_id_match = re.search(r"/document/d/([a-zA-Z0-9-_]+)", url)
                if doc_id_match:
                    doc_id = doc_id_match.group(1)
                    txt_url = (
                        f"https://docs.google.com/document/d/{doc_id}/export?format=txt"
                    )

                    async with aiohttp.ClientSession(
                        timeout=aiohttp.ClientTimeout(total=30)
                    ) as session:
                        async with session.get(txt_url) as response:
                            if response.status == 200:
                                text = await response.text()
                                proxies = self._parse_proxy_list(text)
                                if proxies:
                                    return random.choice(proxies)

            return None

        except Exception as e:
            logger.error(f"‚ùå Failed to fetch proxy from Google Docs {url}: {e}")
            return None

    def _parse_proxy_list(self, text: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        proxies = []

        logger.info(f"üîç Parsing proxy list from text: {text[:200]}...")

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        patterns = [
            # protocol://username:password@host:port (–°–ê–ú–´–ô –†–ê–°–ü–†–û–°–¢–†–ê–ù–ï–ù–ù–´–ô –§–û–†–ú–ê–¢)
            r"^(https?|socks[45]?)://([^:/@]+):([^@]+)@(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+)$",
            # host:port:username:password (—Ñ–æ—Ä–º–∞—Ç ip:port:user:pass)
            r"^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+):([^:\s]+):(.+)$",
            # username:password@host:port (–±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞)
            r"^([^:@\s]+):([^@\s]+)@(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+)$",
            # protocol://host:port (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
            r"^(https?|socks[45]?)://(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+)$",
            # host:port (–ø—Ä–æ—Å—Ç–µ–π—à–∏–π —Ñ–æ—Ä–º–∞—Ç)
            r"^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+)$",
        ]

        for line_num, line in enumerate(text.strip().split("\n"), 1):
            line = line.strip()
            if not line or line.startswith("#"):
                continue

            logger.debug(f"üîç Parsing line {line_num}: {line}")

            proxy = None

            for pattern_num, pattern in enumerate(patterns, 1):
                match = re.match(pattern, line)
                if match:
                    groups = match.groups()
                    logger.debug(
                        f"üéØ Pattern {pattern_num} matched with groups: {groups}"
                    )

                    if pattern_num == 1:
                        # protocol://username:password@host:port
                        proxy = {
                            "type": groups[0],  # http, https, socks4, socks5
                            "host": groups[3],
                            "port": int(groups[4]),
                            "username": groups[1],
                            "password": groups[2],
                        }
                    elif pattern_num == 2:
                        # host:port:username:password
                        proxy = {
                            "type": "http",
                            "host": groups[0],
                            "port": int(groups[1]),
                            "username": groups[2],
                            "password": groups[3],
                        }
                    elif pattern_num == 3:
                        # username:password@host:port
                        proxy = {
                            "type": "http",
                            "host": groups[2],
                            "port": int(groups[3]),
                            "username": groups[0],
                            "password": groups[1],
                        }
                    elif pattern_num == 4:
                        # protocol://host:port
                        proxy = {
                            "type": groups[0],
                            "host": groups[1],
                            "port": int(groups[2]),
                            # –ù–ï–¢ username/password
                        }
                    elif pattern_num == 5:
                        # host:port
                        proxy = {
                            "type": "http",
                            "host": groups[0],
                            "port": int(groups[1]),
                            # –ù–ï–¢ username/password
                        }

                    if proxy is not None:
                        logger.info(f"‚úÖ Parsed proxy from line {line_num}: {proxy}")
                        proxies.append(proxy)
                        break

            if proxy is None:
                logger.warning(f"‚ö†Ô∏è Could not parse line {line_num}: {line}")

        logger.info(f"üéâ Total parsed proxies: {len(proxies)}")
        return proxies

    async def _save_proxy_to_profile(
        self, session: AsyncSession, profile: Profile, proxy_config: Dict[str, Any]
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            await session.execute(
                update(Profile)
                .where(Profile.id == profile.id)
                .values(proxy_config=proxy_config)
            )
            await session.commit()

            logger.info(
                f"üíæ Saved proxy config to profile",
                profile_id=str(profile.id),
                proxy_host=proxy_config.get("host"),
                proxy_port=proxy_config.get("port"),
            )

        except Exception as e:
            logger.error(f"‚ùå Failed to save proxy to profile: {e}")

    def _build_proxy_args(self, proxy_config: Dict[str, Any]) -> List[str]:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏"""
        proxy_args = []

        try:
            host = proxy_config.get("host")
            port = proxy_config.get("port")
            proxy_type = proxy_config.get("type", "http")
            username = proxy_config.get("username")
            password = proxy_config.get("password")

            # –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            logger.error(f"üîç FULL PROXY CONFIG DEBUG: {proxy_config}")
            logger.error(
                f"üîç PARSED VALUES: type={repr(proxy_type)}, host={repr(host)}, port={repr(port)}, username={repr(username)}, password={repr(password)}"
            )

            if not host or not port:
                logger.warning("Invalid proxy config: missing host or port")
                return proxy_args

            # –û—á–∏—â–∞–µ–º proxy_type –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
            if proxy_type.startswith("http://"):
                clean_proxy_type = "http"
            elif proxy_type.startswith("https://"):
                clean_proxy_type = "http"
            elif proxy_type.startswith("socks4://"):
                clean_proxy_type = "socks4"
            elif proxy_type.startswith("socks5://"):
                clean_proxy_type = "socks5"
            else:
                clean_proxy_type = proxy_type.lower()

            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–æ–¥—Ö–æ–¥: —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ–∫—Å–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            # 1. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –ë–ï–ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ URL
            if clean_proxy_type in ["socks4", "socks5"]:
                proxy_server = f"{clean_proxy_type}://{host}:{port}"
            else:
                # –î–ª—è HTTP/HTTPS –ø—Ä–æ–∫—Å–∏
                proxy_server = f"{host}:{port}"

            proxy_args.append(f"--proxy-server={proxy_server}")

            # 2. –û—Ç–¥–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ HTTP Basic Auth
            if username and password and username != clean_proxy_type:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                proxy_args.extend(
                    [
                        f"--proxy-auth-username={username}",
                        f"--proxy-auth-password={password}",
                    ]
                )

                logger.info(f"üîê Added proxy authentication for user: {username}")

            # 3. –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è localhost
            proxy_args.append("--proxy-bypass-list=localhost,127.0.0.1")

            # 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏
            proxy_args.extend(
                [
                    "--disable-features=VizDisplayCompositor",
                    "--disable-background-networking",
                    "--disable-background-timer-throttling",
                    "--disable-client-side-phishing-detection",
                ]
            )

            logger.info(f"üåê Built proxy args: {proxy_args}")
            logger.info(f"üåê Final proxy server: {proxy_server}")

        except Exception as e:
            logger.error(f"‚ùå Failed to build proxy args: {e}")

        return proxy_args

    async def _apply_fingerprint_to_browser(
        self, browser_args: List[str], profile: Profile
    ) -> List[str]:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å fingerprint –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º –±—Ä–∞—É–∑–µ—Ä–∞"""

        try:
            logger.info(f"üîç Applying fingerprint for profile {profile.id}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û JSON –ø–æ–ª–µ fingerprint, –∏–∑–±–µ–≥–∞–µ–º fingerprint_data relationship
            fingerprint_data = None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ JSON fingerprint (—ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç SQL –∑–∞–ø—Ä–æ—Å—ã)
            if hasattr(profile, "fingerprint") and profile.fingerprint:
                fingerprint_data = profile.fingerprint
                logger.info("üîç Using JSON fingerprint data from profile.fingerprint")
            else:
                logger.warning(f"Profile {profile.id} has no JSON fingerprint data")

            if not fingerprint_data or not isinstance(fingerprint_data, dict):
                logger.warning(
                    f"Profile {profile.id} has invalid fingerprint data, using defaults"
                )
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                screen_resolution = "1920x1080"
                viewport_size = "1920x1080"
                timezone = "Europe/Moscow"
                language = "ru-RU"
                platform = "Win32"
                cpu_cores = 4
                memory_size = 8192
                color_depth = 24
                pixel_ratio = 1.0
            else:
                logger.info("üîç Extracting parameters from JSON fingerprint")
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ JSON fingerprint
                fp = fingerprint_data
                screen_resolution = f"{fp.get('screen', {}).get('width', 1920)}x{fp.get('screen', {}).get('height', 1080)}"
                viewport_size = f"{fp.get('viewport', {}).get('width', 1920)}x{fp.get('viewport', {}).get('height', 1080)}"
                timezone = fp.get("timezone", {}).get("timezone", "Europe/Moscow")
                language = fp.get("browser", {}).get("language", "ru-RU")
                platform = fp.get("browser", {}).get("platform", "Win32")
                cpu_cores = fp.get("hardware", {}).get("cpu_cores", 4)
                memory_size = fp.get("hardware", {}).get("memory_size", 8192)
                color_depth = fp.get("screen", {}).get("color_depth", 24)
                pixel_ratio = fp.get("screen", {}).get("device_pixel_ratio", 1.0)

            # –î–æ–±–∞–≤–ª—è–µ–º fingerprint –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            fingerprint_args = [
                # –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
                "--disable-blink-features=AutomationControlled",
                "--exclude-switches=enable-automation",
                "--disable-extensions-except",
                "--disable-component-extensions-with-background-pages=false",
                # –û—Ç–∫–ª—é—á–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é webdriver
                "--disable-dev-shm-usage",
                "--disable-web-security",
                "--allow-running-insecure-content",
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏ –∏ CPU (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–¥ fingerprint)
                f"--max_old_space_size={memory_size}",
                f"--js-flags=--max-old-space-size={memory_size}",
                # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
                f"--lang={language}",
                f"--accept-lang={language}",
                # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
                "--disable-default-apps",
                "--disable-sync",
                "--disable-background-timer-throttling",
                "--disable-backgrounding-occluded-windows",
                "--disable-renderer-backgrounding",
                "--disable-features=TranslateUI,BlinkGenPropertyTrees",
                "--disable-ipc-flooding-protection",
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º
            enhanced_args = browser_args + fingerprint_args

            logger.info(
                f"üîç Applied fingerprint to browser args",
                profile_id=str(profile.id),
                screen_resolution=screen_resolution,
                timezone=timezone,
                language=language,
                cpu_cores=cpu_cores,
                memory_mb=memory_size,
            )

            return enhanced_args

        except Exception as e:
            logger.error(f"‚ùå Failed to apply fingerprint: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return browser_args

    async def _create_context_with_fingerprint(
        self,
        browser: Browser,
        profile: Profile,
        vnc_session,
        selected_proxy: Optional[Dict[str, Any]] = None,
    ) -> BrowserContext:
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º fingerprint"""

        try:
            logger.info(
                f"üîç Creating context with fingerprint for profile {profile.id}"
            )

            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ viewport
            viewport_width = 1920
            viewport_height = 1080

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û JSON –ø–æ–ª–µ fingerprint
            fingerprint_data = None
            if (
                hasattr(profile, "fingerprint")
                and profile.fingerprint
                and isinstance(profile.fingerprint, dict)
            ):
                fingerprint_data = profile.fingerprint
                logger.info("üîç Using JSON fingerprint data for context")

            if fingerprint_data:
                # –ò–∑ JSON fingerprint
                viewport_width = fingerprint_data.get("viewport", {}).get("width", 1920)
                viewport_height = fingerprint_data.get("viewport", {}).get(
                    "height", 1080
                )

            # –ï—Å–ª–∏ –µ—Å—Ç—å VNC —Å–µ—Å—Å–∏—è - –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥ –µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            if vnc_session and vnc_session.resolution:
                vnc_parts = vnc_session.resolution.split("x")
                if len(vnc_parts) == 2:
                    try:
                        vnc_width = int(vnc_parts[0])
                        vnc_height = int(vnc_parts[1])
                        viewport_width = min(viewport_width, vnc_width - 100)
                        viewport_height = min(viewport_height, vnc_height - 100)
                    except ValueError:
                        logger.warning(
                            f"Invalid VNC resolution format: {vnc_session.resolution}"
                        )

            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã fingerprint —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            timezone_id = "Europe/Moscow"
            locale = "ru-RU"
            device_scale_factor = 1.0
            has_touch = False

            if fingerprint_data:
                timezone_id = fingerprint_data.get("timezone", {}).get(
                    "timezone", "Europe/Moscow"
                )
                locale = fingerprint_data.get("browser", {}).get("language", "ru-RU")
                device_scale_factor = fingerprint_data.get("screen", {}).get(
                    "device_pixel_ratio", 1.0
                )
                has_touch = fingerprint_data.get("touch", {}).get(
                    "touch_support", False
                )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
            proxy_config = None
            if selected_proxy:
                proxy_config = {
                    "server": f"http://{selected_proxy['host']}:{selected_proxy['port']}",
                }
                if selected_proxy.get("username") and selected_proxy.get("password"):
                    proxy_config["username"] = selected_proxy["username"]
                    proxy_config["password"] = selected_proxy["password"]

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ fingerprint
            context = await browser.new_context(
                user_agent=profile.user_agent,
                viewport={"width": viewport_width, "height": viewport_height},
                locale=locale,
                timezone_id=timezone_id,
                device_scale_factor=device_scale_factor,
                has_touch=has_touch,
                ignore_https_errors=True,
                proxy=proxy_config,
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
                java_script_enabled=True,
                bypass_csp=True,
            )

            # –ü—Ä–∏–º–µ–Ω—è–µ–º fingerprint —á–µ—Ä–µ–∑ JavaScript
            await self._inject_fingerprint_scripts(context, profile)

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies
            if profile.cookies:
                try:
                    await context.add_cookies(profile.cookies)
                except Exception as e:
                    logger.warning(
                        f"Failed to restore cookies for profile {profile.id}: {e}"
                    )

            logger.info(
                f"üé≠ Created context with fingerprint",
                profile_id=str(profile.id),
                viewport=f"{viewport_width}x{viewport_height}",
                timezone=timezone_id,
                locale=locale,
                scale_factor=device_scale_factor,
                has_touch=has_touch,
            )

            return context

        except Exception as e:
            logger.error(f"‚ùå Failed to create context with fingerprint: {e}")
            raise

    async def _inject_fingerprint_scripts(
        self, context: BrowserContext, profile: Profile
    ):
        """–í–Ω–µ–¥—Ä–∏—Ç—å JavaScript —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ fingerprint"""

        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û JSON –ø–æ–ª–µ fingerprint
            fingerprint_data = None
            if (
                hasattr(profile, "fingerprint")
                and profile.fingerprint
                and isinstance(profile.fingerprint, dict)
            ):
                fingerprint_data = profile.fingerprint

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã fingerprint —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            cpu_cores = 4
            memory_size = 8192
            platform = "Win32"
            webdriver_present = False

            if fingerprint_data:
                # JSON fingerprint
                cpu_cores = fingerprint_data.get("hardware", {}).get("cpu_cores", 4)
                memory_size = fingerprint_data.get("hardware", {}).get(
                    "memory_size", 8192
                )
                platform = fingerprint_data.get("browser", {}).get("platform", "Win32")
                webdriver_present = False  # –í—Å–µ–≥–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º
            else:
                logger.info(
                    f"No JSON fingerprint data for profile {profile.id}, using defaults"
                )

            # JavaScript –∫–æ–¥ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ fingerprint
            fingerprint_script = f"""
            // –°–∫—Ä—ã–≤–∞–µ–º WebDriver
            Object.defineProperty(navigator, 'webdriver', {{
                get: () => {str(webdriver_present).lower()},
            }});

            // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º navigator.platform
            Object.defineProperty(navigator, 'platform', {{
                get: () => '{platform}',
            }});

            // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä CPU
            Object.defineProperty(navigator, 'hardwareConcurrency', {{
                get: () => {cpu_cores},
            }});

            // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–º—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            if ('deviceMemory' in navigator) {{
                Object.defineProperty(navigator, 'deviceMemory', {{
                    get: () => {memory_size // 1024},  // –í GB
                }});
            }}

            // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫–∏
            Object.defineProperty(navigator, 'languages', {{
                get: () => ['ru-RU', 'ru', 'en-US', 'en'],
            }});

            // –°–∫—Ä—ã–≤–∞–µ–º automation —Ñ–ª–∞–≥–∏
            if (window.chrome) {{
                Object.defineProperty(window.chrome, 'runtime', {{
                    get: () => undefined,
                }});
            }}

            // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º plugins (–¥–µ–ª–∞–µ–º –≤–∏–¥ —á—Ç–æ –µ—Å—Ç—å –ø–ª–∞–≥–∏–Ω—ã)
            Object.defineProperty(navigator, 'plugins', {{
                get: () => [
                    {{ name: "PDF Viewer", description: "Portable Document Format", filename: "internal-pdf-viewer" }},
                    {{ name: "Chrome PDF Plugin", description: "Portable Document Format", filename: "internal-pdf-viewer" }},
                    {{ name: "Chromium PDF Plugin", description: "Portable Document Format", filename: "internal-pdf-viewer" }},
                ],
            }});

            // –ú–∞—Å–∫–∏—Ä—É–µ–º permissions API
            const originalQuery = window.navigator.permissions.query;
            window.navigator.permissions.query = (parameters) => (
                parameters.name === 'notifications' ?
                    Promise.resolve({{ state: Notification.permission }}) :
                    originalQuery(parameters)
            );

            // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            window.outerHeight = window.innerHeight;
            window.outerWidth = window.innerWidth;

            console.log('üé≠ Fingerprint masking applied', {{
                platform: '{platform}',
                cpu_cores: {cpu_cores},
                memory_gb: {memory_size // 1024},
                webdriver_hidden: true
            }});
            """

            await context.add_init_script(fingerprint_script)

            logger.info(
                f"üé≠ Injected fingerprint scripts",
                profile_id=str(profile.id),
                cpu_cores=cpu_cores,
                memory_mb=memory_size,
                platform=platform,
            )

        except Exception as e:
            logger.error(f"‚ùå Failed to inject fingerprint scripts: {e}")
            # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –±—Ä–∞—É–∑–µ—Ä–∞


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä worker'–∞
profile_nurture_worker = ProfileNurtureWorker()


async def start_profile_nurture_worker():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å worker –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    asyncio.create_task(profile_nurture_worker.start())


async def stop_profile_nurture_worker():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å worker"""
    await profile_nurture_worker.stop()
