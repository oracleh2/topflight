#!/usr/bin/env python3
"""
Yandex Parser Monitor
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
"""

import os
import sys
import time
import json
import psutil
import requests
import logging
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("/var/www/topflight/logs/backend-monitor.log"),
        logging.StreamHandler(),
    ],
)

logger = logging.getLogger("yandex-parser-monitor")


class SystemMonitor:
    def __init__(self):
        self.api_url = os.getenv("API_URL", "http://localhost:8000")
        self.check_interval = int(os.getenv("MONITOR_INTERVAL", "300"))  # 5 –º–∏–Ω—É—Ç
        self.stats_file = Path("/var/www/topflight/logs/monitor_stats.json")

    def check_api_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        try:
            response = requests.get(f"{self.api_url}/health", timeout=10)
            if response.status_code == 200:
                logger.info(f"‚úÖ API –∑–¥–æ—Ä–æ–≤: {response.status_code}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False

    def check_system_resources(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)

            # –ü–∞–º—è—Ç—å
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            memory_available_gb = memory.available / (1024**3)

            # –î–∏—Å–∫
            disk = psutil.disk_usage("/")
            disk_percent = disk.percent
            disk_free_gb = disk.free / (1024**3)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            logger.info(f"üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:")
            logger.info(f"   CPU: {cpu_percent:.1f}%")
            logger.info(
                f"   RAM: {memory_percent:.1f}% (—Å–≤–æ–±–æ–¥–Ω–æ: {memory_available_gb:.1f}GB)"
            )
            logger.info(
                f"   –î–∏—Å–∫: {disk_percent:.1f}% (—Å–≤–æ–±–æ–¥–Ω–æ: {disk_free_gb:.1f}GB)"
            )

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if cpu_percent > 80:
                logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent:.1f}%")

            if memory_percent > 85:
                logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_percent:.1f}%")

            if disk_percent > 90:
                logger.warning(f"‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk_percent:.1f}%")

            return {
                "cpu_percent": cpu_percent,
                "memory_percent": memory_percent,
                "memory_available_gb": memory_available_gb,
                "disk_percent": disk_percent,
                "disk_free_gb": disk_free_gb,
                "timestamp": datetime.now().isoformat(),
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
            return None

    def check_log_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
        logs_dir = Path("/var/www/topflight/logs")
        log_info = {}

        try:
            for log_file in logs_dir.glob("backend-*.log"):
                if log_file.is_file():
                    size_mb = log_file.stat().st_size / (1024**2)
                    log_info[log_file.name] = {
                        "size_mb": round(size_mb, 2),
                        "modified": datetime.fromtimestamp(
                            log_file.stat().st_mtime
                        ).isoformat(),
                    }

                    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
                    if size_mb > 100:
                        logger.warning(
                            f"‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –ª–æ–≥–∞: {log_file.name} ({size_mb:.1f}MB)"
                        )

            logger.info(f"üìÅ –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {len(log_info)} —Ñ–∞–π–ª–æ–≤")
            return log_info

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤: {e}")
            return {}

    def check_processes(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PM2"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Python, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—à–∏–º API
            api_processes = []
            for proc in psutil.process_iter(
                ["pid", "name", "cmdline", "cpu_percent", "memory_percent"]
            ):
                try:
                    if "python" in proc.info["name"].lower():
                        cmdline = (
                            " ".join(proc.info["cmdline"])
                            if proc.info["cmdline"]
                            else ""
                        )
                        if "run_api.py" in cmdline or "yandex-parser" in cmdline:
                            api_processes.append(
                                {
                                    "pid": proc.info["pid"],
                                    "name": proc.info["name"],
                                    "cpu_percent": proc.info["cpu_percent"],
                                    "memory_percent": proc.info["memory_percent"],
                                    "cmdline": cmdline,
                                }
                            )
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue

            logger.info(f"üîÑ –ù–∞–π–¥–µ–Ω–æ API –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(api_processes)}")
            return api_processes

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            return []

    def save_stats(self, stats):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if self.stats_file.exists():
                with open(self.stats_file, "r") as f:
                    all_stats = json.load(f)
            else:
                all_stats = []

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            all_stats.append(stats)

            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
            if len(all_stats) > 100:
                all_stats = all_stats[-100:]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(self.stats_file, "w") as f:
                json.dump(all_stats, f, indent=2)

            logger.info(f"üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ({len(all_stats)} –∑–∞–ø–∏—Å–µ–π)")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def run_check(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        logger.info("üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")

        stats = {
            "timestamp": datetime.now().isoformat(),
            "api_health": self.check_api_health(),
            "system_resources": self.check_system_resources(),
            "log_files": self.check_log_files(),
            "processes": self.check_processes(),
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.save_stats(stats)

        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return stats

    def run_continuous(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.check_interval}—Å)")

        while True:
            try:
                self.run_check()
                time.sleep(self.check_interval)
            except KeyboardInterrupt:
                logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = SystemMonitor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    mode = os.getenv("MONITOR_MODE", "single")

    if mode == "continuous":
        monitor.run_continuous()
    else:
        # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–ª—è cron)
        monitor.run_check()


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")
        sys.exit(1)
