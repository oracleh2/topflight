#!/usr/bin/env python3
# scripts/debug_tasks.py - CLI —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è debug —Ä–µ–∂–∏–º–æ–º

import asyncio
import sys
import json
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent.parent / "backend"))

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from app.database import async_session_maker
from app.models import Task, DeviceType
from app.core.task_manager import TaskManager
from app.core.enhanced_vnc_manager import enhanced_vnc_manager
import structlog

logger = structlog.get_logger(__name__)


class DebugTasksCLI:
    """CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è debug —Ä–µ–∂–∏–º–æ–º –∑–∞–¥–∞—á"""

    def __init__(self):
        self.session: Optional[AsyncSession] = None

    async def __aenter__(self):
        self.session = async_session_maker()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    async def list_tasks(self, status: Optional[str] = None, limit: int = 20):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
        query = select(Task).order_by(Task.created_at.desc()).limit(limit)

        if status:
            query = query.where(Task.status == status)

        result = await self.session.execute(query)
        tasks = result.scalars().all()

        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á:")
        print("=" * 120)
        print(f"{'ID':<36} {'–¢–∏–ø':<20} {'–°—Ç–∞—Ç—É—Å':<12} {'–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ':<10} {'Debug':<8} {'–°–æ–∑–¥–∞–Ω–∞':<19}")
        print("=" * 120)

        for task in tasks:
            debug_status = "‚úÖ –î–∞" if task.debug_enabled else "‚ùå –ù–µ—Ç"
            created_str = task.created_at.strftime("%Y-%m-%d %H:%M:%S") if task.created_at else "N/A"

            print(f"{str(task.id):<36} {task.task_type:<20} {task.status:<12} {task.device_type:<10} {debug_status:<8} {created_str}")

        print("=" * 120)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–ª–∞–∂–∏–≤–∞—Ç—å
        debuggable = [t for t in tasks if t.can_be_debugged()]
        if debuggable:
            print(f"\nüîç –ó–∞–¥–∞—á –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –¥–µ–±–∞–≥–∞: {len(debuggable)}")
            for task in debuggable[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   ‚Ä¢ {task.id} - {task.task_type} ({task.status})")

    async def enable_debug(self, task_id: str, device_type: str = "desktop"):
        """–í–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º –¥–ª—è –∑–∞–¥–∞—á–∏"""
        try:
            device_type_enum = DeviceType(device_type.lower())
        except ValueError:
            device_type_enum = DeviceType.DESKTOP

        task_manager = TaskManager(self.session)
        success = await task_manager.enable_task_debug(
            task_id=task_id,
            device_type=device_type_enum
        )

        if success:
            print(f"‚úÖ Debug —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            print(f"üñ•Ô∏è  –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_type_enum.value}")
            print("üìù –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤–æ—Ä–∫–µ—Ä–æ–º –≤ debug —Ä–µ–∂–∏–º–µ")
            print("üîç –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VNC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")

    async def disable_debug(self, task_id: str):
        """–û—Ç–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º –¥–ª—è –∑–∞–¥–∞—á–∏"""
        task_manager = TaskManager(self.session)
        success = await task_manager.disable_task_debug(task_id=task_id)

        # –¢–∞–∫–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º VNC —Å–µ—Å—Å–∏—é
        try:
            await enhanced_vnc_manager.stop_debug_session(task_id)
            print(f"üîå VNC —Å–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VNC —Å–µ—Å—Å–∏—é: {e}")

        if success:
            print(f"‚úÖ Debug —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")

    async def restart_task(self, task_id: str, device_type: str = "desktop"):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤ debug —Ä–µ–∂–∏–º–µ"""
        try:
            device_type_enum = DeviceType(device_type.lower())
        except ValueError:
            device_type_enum = DeviceType.DESKTOP

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
        result = await self.session.execute(select(Task).where(Task.id == task_id))
        task = result.scalar_one_or_none()

        if not task:
            print(f"‚ùå –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º VNC —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            await enhanced_vnc_manager.stop_debug_session(task_id)
        except Exception:
            pass

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤–∫–ª—é—á–∞–µ–º debug
        task.status = "pending"
        task.started_at = None
        task.completed_at = None
        task.worker_id = None
        task.error_message = None
        task.result = None

        if not task.parameters:
            task.parameters = {}

        task.parameters.update({
            "debug_enabled": True,
            "debug_device_type": device_type_enum.value,
        })

        await self.session.commit()

        print(f"üîÑ –ó–∞–¥–∞—á–∞ {task_id} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ –≤ debug —Ä–µ–∂–∏–º–µ")
        print(f"üìã –¢–∏–ø: {task.task_type}")
        print(f"üñ•Ô∏è  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_type_enum.value}")
        print("‚è≥ –í–æ—Ä–∫–µ—Ä –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –∑–∞–¥–∞—á—É –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥")

    async def show_vnc_sessions(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ VNC —Å–µ—Å—Å–∏–∏"""
        try:
            sessions = await enhanced_vnc_manager.get_active_sessions()

            if not sessions:
                print("üì∫ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VNC —Å–µ—Å—Å–∏–π")
                return

            print(f"\nüì∫ –ê–∫—Ç–∏–≤–Ω—ã—Ö VNC —Å–µ—Å—Å–∏–π: {len(sessions)}")
            print("=" * 100)
            print(f"{'Task ID':<36} {'VNC Port':<10} {'Display':<10} {'Resolution':<12} {'Device':<10} {'Status':<10}")
            print("=" * 100)

            for session in sessions:
                task_id = session.get("task_id", "N/A")
                vnc_port = session.get("vnc_port", "N/A")
                display_num = session.get("display_num", "N/A")
                resolution = session.get("resolution", "N/A")
                device_type = session.get("device_type", "N/A")
                status = session.get("status", "N/A")

                print(f"{task_id:<36} {vnc_port:<10} :{display_num:<9} {resolution:<12} {device_type:<10} {status:<10}")

            print("=" * 100)
            print("\nüîå –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
            for session in sessions:
                task_id = session.get("task_id", "Unknown")[:8]
                vnc_port = session.get("vnc_port")
                print(f"   ‚Ä¢ vncviewer localhost:{vnc_port}  # Task: {task_id}...")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VNC —Å–µ—Å—Å–∏–π: {e}")

    async def show_task_info(self, task_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ"""
        result = await self.session.execute(select(Task).where(Task.id == task_id))
        task = result.scalar_one_or_none()

        if not task:
            print(f"‚ùå –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ {task_id}")
        print("=" * 80)
        print(f"üè∑Ô∏è  –¢–∏–ø: {task.task_type}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {task.status}")
        print(f"üñ•Ô∏è  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {task.device_type}")
        print(f"üîç Debug —Ä–µ–∂–∏–º: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if task.debug_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
        print(f"üîÑ –ú–æ–∂–Ω–æ –æ—Ç–ª–∞–¥–∏—Ç—å: {'‚úÖ –î–∞' if task.can_be_debugged() else '‚ùå –ù–µ—Ç'}")

        if task.created_at:
            print(f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {task.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
        if task.started_at:
            print(f"‚ñ∂Ô∏è  –ó–∞–ø—É—â–µ–Ω–∞: {task.started_at.strftime('%Y-%m-%d %H:%M:%S')}")
        if task.completed_at:
            print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {task.completed_at.strftime('%Y-%m-%d %H:%M:%S')}")

        if task.worker_id:
            print(f"üë∑ –í–æ—Ä–∫–µ—Ä: {task.worker_id}")

        if task.error_message:
            print(f"‚ùå –û—à–∏–±–∫–∞: {task.error_message}")

        # Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if task.debug_enabled and task.debug_info:
            print(f"\nüîç Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            debug_info = task.debug_info
            for key, value in debug_info.items():
                if value:
                    print(f"   ‚Ä¢ {key}: {value}")

        # VNC —Å–µ—Å—Å–∏—è
        try:
            vnc_session = enhanced_vnc_manager.get_session_by_task(task_id)
            if vnc_session:
                print(f"\nüì∫ VNC —Å–µ—Å—Å–∏—è:")
                print(f"   ‚Ä¢ –ü–æ—Ä—Ç: {vnc_session.vnc_port}")
                print(f"   ‚Ä¢ –î–∏—Å–ø–ª–µ–π: :{vnc_session.display_num}")
                print(f"   ‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {vnc_session.resolution}")
                print(f"   ‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: vncviewer localhost:{vnc_session.vnc_port}")
        except Exception:
            pass

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏
        if task.parameters:
            print(f"\n‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            print(json.dumps(task.parameters, indent=2, ensure_ascii=False))


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    if len(sys.argv) < 2:
        print("""
üîç Debug Tasks CLI - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–æ–º –∑–∞–¥–∞—á

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/debug_tasks.py <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]

–ö–æ–º–∞–Ω–¥—ã:
    list [status] [limit]         - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ —Å—Ç–∞—Ç—É—Å—É)
    enable <task_id> [device]     - –í–∫–ª—é—á–∏—Ç—å debug –¥–ª—è –∑–∞–¥–∞—á–∏
    disable <task_id>             - –û—Ç–∫–ª—é—á–∏—Ç—å debug –¥–ª—è –∑–∞–¥–∞—á–∏
    restart <task_id> [device]    - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤ debug —Ä–µ–∂–∏–º–µ
    vnc                           - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ VNC —Å–µ—Å—Å–∏–∏
    info <task_id>                - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ

–ü—Ä–∏–º–µ—Ä—ã:
    python scripts/debug_tasks.py list pending 10
    python scripts/debug_tasks.py enable 123e4567-e89b-12d3-a456-426614174000 desktop
    python scripts/debug_tasks.py restart 123e4567-e89b-12d3-a456-426614174000
    python scripts/debug_tasks.py vnc
    python scripts/debug_tasks.py info 123e4567-e89b-12d3-a456-426614174000
        """)
        return

    command = sys.argv[1]

    async with DebugTasksCLI() as cli:
        try:
            if command == "list":
                status = sys.argv[2] if len(sys.argv) > 2 else None
                limit = int(sys.argv[3]) if len(sys.argv) > 3 else 20
                await cli.list_tasks(status, limit)

            elif command == "enable":
                if len(sys.argv) < 3:
                    print("‚ùå –£–∫–∞–∂–∏—Ç–µ task_id: python scripts/debug_tasks.py enable <task_id>")
                    return
                task_id = sys.argv[2]
                device_type = sys.argv[3] if len(sys.argv) > 3 else "desktop"
                await cli.enable_debug(task_id, device_type)

            elif command == "disable":
                if len(sys.argv) < 3:
                    print("‚ùå –£–∫–∞–∂–∏—Ç–µ task_id: python scripts/debug_tasks.py disable <task_id>")
                    return
                task_id = sys.argv[2]
                await cli.disable_debug(task_id)

            elif command == "restart":
                if len(sys.argv) < 3:
                    print("‚ùå –£–∫–∞–∂–∏—Ç–µ task_id: python scripts/debug_tasks.py restart <task_id>")
                    return
                task_id = sys.argv[2]
                device_type = sys.argv[3] if len(sys.argv) > 3 else "desktop"
                await cli.restart_task(task_id, device_type)

            elif command == "vnc":
                await cli.show_vnc_sessions()

            elif command == "info":
                if len(sys.argv) < 3:
                    print("‚ùå –£–∫–∞–∂–∏—Ç–µ task_id: python scripts/debug_tasks.py info <task_id>")
                    return
                task_id = sys.argv[2]
                await cli.show_task_info(task_id)

            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
