#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è TopFlight –≤ production
# scripts/deploy_production.sh

set -euo pipefail

PROJECT_ROOT="/var/www/topflight"
DEPLOY_LOG="$PROJECT_ROOT/logs/deploy_$(date +%Y%m%d_%H%M%S).log"

echo "üöÄ TopFlight Production Deployment" | tee "$DEPLOY_LOG"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
if [ "$(id -u)" = "0" ]; then
    echo "‚ùå Do not run this script as root!" | tee -a "$DEPLOY_LOG"
    exit 1
fi

if [ "$(whoami)" != "topflight" ]; then
    echo "‚ùå This script should be run as 'topflight' user!" | tee -a "$DEPLOY_LOG"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -d "$PROJECT_ROOT" ]; then
    echo "‚ùå Project directory $PROJECT_ROOT not found!" | tee -a "$DEPLOY_LOG"
    exit 1
fi

cd "$PROJECT_ROOT"

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "üìÅ Creating directories..." | tee -a "$DEPLOY_LOG"
mkdir -p logs data/postgres data/redis data/vnc data/vnc_tokens data/prometheus data/grafana
chmod 755 logs data

# Backend setup
echo "üêç Setting up backend..." | tee -a "$DEPLOY_LOG"
cd backend

# –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
if [ ! -d "venv" ]; then
    python3.11 -m venv venv
    echo "‚úÖ Virtual environment created" | tee -a "$DEPLOY_LOG"
fi

source venv/bin/activate
pip install --upgrade pip
pip install -r requirements.txt
echo "‚úÖ Python dependencies installed" | tee -a "$DEPLOY_LOG"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
if [ ! -f ".env" ]; then
    cp .env.example .env
    echo "‚ö†Ô∏è Created .env file - please edit with your settings!" | tee -a "$DEPLOY_LOG"
fi

# –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üóÑÔ∏è Running database migrations..." | tee -a "$DEPLOY_LOG"
alembic upgrade head
echo "‚úÖ Database migrations completed" | tee -a "$DEPLOY_LOG"

# Frontend setup
echo "üé® Setting up frontend..." | tee -a "$DEPLOY_LOG"
cd ../frontend
npm install
npm run build
echo "‚úÖ Frontend built" | tee -a "$DEPLOY_LOG"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ VNC —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üñ•Ô∏è Installing VNC services..." | tee -a "$DEPLOY_LOG"
cd "$PROJECT_ROOT"
chmod +x scripts/install_vnc_services.sh
sudo scripts/install_vnc_services.sh

# Docker services
echo "üê≥ Starting Docker services..." | tee -a "$DEPLOY_LOG"
docker-compose up -d postgres redis
echo "‚úÖ Docker services started" | tee -a "$DEPLOY_LOG"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üîç Checking services..." | tee -a "$DEPLOY_LOG"
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
if pg_isready -h localhost -U postgres; then
    echo "‚úÖ PostgreSQL is ready" | tee -a "$DEPLOY_LOG"
else
    echo "‚ùå PostgreSQL is not ready" | tee -a "$DEPLOY_LOG"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
if redis-cli ping >/dev/null 2>&1; then
    echo "‚úÖ Redis is ready" | tee -a "$DEPLOY_LOG"
else
    echo "‚ùå Redis is not ready" | tee -a "$DEPLOY_LOG"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
echo "üë§ Creating admin user..." | tee -a "$DEPLOY_LOG"
cd "$PROJECT_ROOT/backend"
source venv/bin/activate
python create_admin_user.py

echo "üéâ TopFlight deployment completed!" | tee -a "$DEPLOY_LOG"
echo "" | tee -a "$DEPLOY_LOG"
echo "üìã Next steps:" | tee -a "$DEPLOY_LOG"
echo "1. Configure .env file in backend/" | tee -a "$DEPLOY_LOG"
echo "2. Set up nginx reverse proxy" | tee -a "$DEPLOY_LOG"
echo "3. Configure SSL certificates" | tee -a "$DEPLOY_LOG"
echo "4. Set up monitoring and backups" | tee -a "$DEPLOY_LOG"
echo "5. Test VNC system: scripts/test_vnc_system.sh" | tee -a "$DEPLOY_LOG"
